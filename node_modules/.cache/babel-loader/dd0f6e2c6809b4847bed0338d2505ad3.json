{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\src\\views\\active\\specialSale.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\src\\views\\active\\specialSale.vue","mtime":1596627053486},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKCJDOi9Vc2Vycy9BZG1pbmlzdHJhdG9yL0Rlc2t0b3AvdmlwX2lubGluZV9oNS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQiKTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwOwoKdmFyIF92dWV4ID0gcmVxdWlyZSgidnVleCIpOwoKdmFyIF9zZWNraWxsTWl4aW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkAvbWl4aW5zL3NlY2tpbGxNaXhpbiIpKTsKCnZhciBfYWN0aXZlQnJhbmQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkBjb21wb25lbnRzL2FjdGl2ZS9hY3RpdmVCcmFuZCIpKTsKCnZhciBfYWN0aXZlTm90aWNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJAY29tcG9uZW50cy9hY3RpdmUvYWN0aXZlTm90aWNlIikpOwoKdmFyIF9hY3RpdmVHcmFwaGljID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJAY29tcG9uZW50cy9hY3RpdmUvYWN0aXZlR3JhcGhpYyIpKTsKCnZhciBfYWN0aXZlUm9vbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiQGNvbXBvbmVudHMvYWN0aXZlL2FjdGl2ZVJvb20iKSk7Cgp2YXIgX2FjdGl2ZUhlYWRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiQGNvbXBvbmVudHMvYWN0aXZlL2FjdGl2ZUhlYWRlciIpKTsKCnZhciBfYWN0aXZlQ291cG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJAY29tcG9uZW50cy9hY3RpdmUvYWN0aXZlQ291cG9uIikpOwoKdmFyIF9hY3RpdmVDYXNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJAY29tcG9uZW50cy9hY3RpdmUvYWN0aXZlQ2FzaCIpKTsKCnZhciBfYWN0aXZlRm9vdGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJAY29tcG9uZW50cy9hY3RpdmUvYWN0aXZlRm9vdGVyIikpOwoKdmFyIF91dGlscyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiQC91dGlscy91dGlscyIpKTsKCnZhciBfcGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJAL3V0aWxzL3BheSIpKTsKCnZhciBfYWN0aXZlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJAL2ZpbHRlcnMvYWN0aXZlIikpOwoKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KdmFyIF9kZWZhdWx0ID0gewogIG5hbWU6ICdzcGVjaWFsU2FsZScsCiAgbWl4aW5zOiBbX3NlY2tpbGxNaXhpbi5kZWZhdWx0XSwKICBjb21wdXRlZDoge30sCiAgY29tcG9uZW50czogewogICAgYWN0aXZlSGVhZGVyOiBfYWN0aXZlSGVhZGVyLmRlZmF1bHQsCiAgICBhY3RpdmVDb3Vwb246IF9hY3RpdmVDb3Vwb24uZGVmYXVsdCwKICAgIGFjdGl2ZUNhc2g6IF9hY3RpdmVDYXNoLmRlZmF1bHQsCiAgICBhY3RpdmVHcmFwaGljOiBfYWN0aXZlR3JhcGhpYy5kZWZhdWx0LAogICAgYWN0aXZlQnJhbmQ6IF9hY3RpdmVCcmFuZC5kZWZhdWx0LAogICAgYWN0aXZlUm9vbTogX2FjdGl2ZVJvb20uZGVmYXVsdCwKICAgIGFjdGl2ZU5vdGljZTogX2FjdGl2ZU5vdGljZS5kZWZhdWx0LAogICAgYWN0aXZlRm9vdGVyOiBfYWN0aXZlRm9vdGVyLmRlZmF1bHQKICB9LAoKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdmlwVXNlcjogZmFsc2UsCiAgICAgIHN1aXRTaG9wczogW10sCiAgICAgIG1lZGlhTGlzdDogW10sCiAgICAgIGdyYXBoaWNEZXRhaWw6ICcnLAogICAgICAvLyDor6bmg4VodG1s5L+h5oGvCiAgICAgIHRpbWVyOiBudWxsLAogICAgICByZWNvbW1lbmRMaXN0OiBbXSwKICAgICAgLy8g5YW25LuW56S85YyF5o6o6I2QL+aOqOiNkOadg+ebigogICAgICBmbGFnOiB0cnVlLAogICAgICBzaG93UG9wOiBmYWxzZSwKICAgICAgLy8g6Z2e5Lya5ZGY6LSt5Lmw5pe25o+Q56S6CiAgICAgIHJlY29tUGFnZTogMSwKICAgICAgLy8g54m55Y2W55qE5o6o6I2Q5p2D55uK5LiK5ouJ5pu05aSaCiAgICAgIGhhc01vcmU6IHRydWUsCiAgICAgIC8vIOeJueWNlueahOaOqOiNkOadg+ebiuabtOWkmuaPkOekugogICAgICBidG5EaXNhYmxlZDogZmFsc2UsCiAgICAgIGNhc2hNYXNrOiBmYWxzZSwKICAgICAgc2VsQ2FzaHJlZDoge30sCiAgICAgIHNlbENvbnN1bWVyOiB7fSwKICAgICAgY2FsZW5kYXJNYXNrOiBmYWxzZSwKICAgICAgLy8g5pel5Y6G5by556qXCiAgICAgIHNlbERhdGU6IHsKICAgICAgICBzdGFydFRpbWU6ICcnLAogICAgICAgIGVuZFRpbWU6ICcnCiAgICAgIH0sCiAgICAgIC8vIOiHquaIkea4uOmAieS4reeahOaXtumXtAogICAgICAvLyB0cmF2ZWxNb250aEluZm86IHt9LAogICAgICBjb25kaXRpb25JbmZvOiB7fSwKICAgICAgLy8g5YWR5aWW5Lit5b+D5L+h5oGvCiAgICAgIHRyYWN2ZWxVc2VyTGlzdDogW10sCiAgICAgIHJlZnJlc2g6IGZhbHNlLAogICAgICAvLyDliLfmlrDml6XljobmlbDmja4KICAgICAgZG93blRpbWU6IHsKICAgICAgICBob3VyOiAnMDAnLAogICAgICAgIG1pbnV0ZTogJzAwJywKICAgICAgICBzZWNvbmQ6ICcwMCcKICAgICAgfSwKICAgICAgcmVhZHk6IGZhbHNlLAogICAgICBidG5UZXh0OiAn56uL5Y2z5oqi6LStJywKICAgICAgc2hvd0J0blR4dDogdHJ1ZSwKICAgICAgZml4ZWREZXRhaWw6IHt9LAogICAgICAvLyDpl6jlupflk4HniYzkurrlnYfkv6Hmga8KICAgICAgcmVtYWluVGltZTogMzk5OTAwMCwKICAgICAgY2hhbm5lbFR5cGU6ICcnLAogICAgICBvcHRpb25zOiB0aGlzLiRyb3V0ZS5xdWVyeSB8fCB7fSwKICAgICAgaW5mbzoge30KICAgIH07CiAgfSwKCiAgY29tcHV0ZWQ6IHsgLi4uKDAsIF92dWV4Lm1hcEdldHRlcnMpKFsibG9jYXRpb25JbmZvIiwgInd4VXNlciIsICJsb2NhdGlvbkNpdHkiLCAidmlwQ2FyZEluZm8iLCAidXBkYXRlRmxhZyJdKQogIH0sCiAgbWV0aG9kczogewogICAgLy8g5oyJ6ZKu6aKG5Y+W44CB5byA6YCa44CB6LSt5Lmw562J5pON5L2c5LqL5Lu2CiAgICBoYW5kbGVyRXZlbnQoKSB7CiAgICAgIGlmICh0aGlzLmJ0bkRpc2FibGVkKSByZXR1cm47IC8vIOaMiemSrue9rueBsOaXtu+8jOaXoOazleeCueWHu+i0reS5sOaMiemSrgoKICAgICAgbGV0IGluZm8gPSB0aGlzLmluZm87CgogICAgICBpZiAoaW5mby5zdXBwbGllckNvZGUgPT0gJ1BBUlRZX1pXWScgJiYgWzMsIDQsIDVdLmluY2x1ZGVzKGluZm8udmFsaWRpdHlUeXBlKSkgewogICAgICAgIC8vIOiHquaIkea4uOeJueWNluaXtiAmJiDpnIDopoHpgInlrprml6XmnJ8gICDlvLnlh7rpgInmi6nml6XljoYKICAgICAgICBpZiAoIXRoaXMuY2FsZW5kYXJNYXNrKSB7CiAgICAgICAgICB0aGlzLmNhbGVuZGFyTWFzayA9IHRydWU7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoIXRoaXMuc2VsRGF0ZS5zdGFydFRpbWUpIHsKICAgICAgICAgIC8vIOacqumAieaLqeaXtumXtAogICAgICAgICAgdGhpcy4kVG9hc3QoJ+ivt+mAieaLqea4uOeOqeaXpeacnycpOwogICAgICAgICAgdGhpcy5jYWxlbmRhck1hc2sgPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoaW5mby52YWxpZGl0eVR5cGUgPT0gNCB8fCBpbmZvLnZhbGlkaXR5VHlwZSA9PSA1KSB7CiAgICAgICAgICAgIC8vIOa4uOWuoumAieWumuaXpeacn+W7tuWQjljmnInmlYggfHwg5ri45a6i6YCJ5a6a5pel5pyf5oyH5a6a5pe26Ze05pyJ5pWICiAgICAgICAgICAgIHRoaXMuJGRpYWxvZy5jb25maXJtKHsKICAgICAgICAgICAgICB0aXRsZTogJ+ehruWumuWHuua4uOaXtumXtD8nLAogICAgICAgICAgICAgIG1lc3NhZ2U6IGAke191dGlscy5kZWZhdWx0LmZvcm1hdFRpbWUodGhpcy5zZWxEYXRlLnN0YXJ0VGltZSB8fCAwLCAnWVlZWS9NTS9ERCcpfSB+ICR7X3V0aWxzLmRlZmF1bHQuZm9ybWF0VGltZSh0aGlzLnNlbERhdGUuZW5kVGltZSB8fCAwLCAnWVlZWS9NTS9ERCcpfWAKICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy5wbGFjZU9yZGVyKCk7CiAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IHsvLyBvbiBjYW5jZWwKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLiRkaWFsb2cuY29uZmlybSh7CiAgICAgICAgICAgICAgdGl0bGU6ICfnoa7lrprlh7rmuLjml7bpl7Q/JywKICAgICAgICAgICAgICBtZXNzYWdlOiBgJHtfdXRpbHMuZGVmYXVsdC5mb3JtYXRUaW1lKHRoaXMuc2VsRGF0ZS5zdGFydFRpbWUgfHwgMCwgJ1lZWVkvTU0vREQnKX1gCiAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4gewogICAgICAgICAgICAgIHRoaXMucGxhY2VPcmRlcigpOwogICAgICAgICAgICB9KS5jYXRjaCgoKSA9PiB7Ly8gb24gY2FuY2VsCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLnBsYWNlT3JkZXIoKTsKICAgIH0sCgogICAgLy8g5LiL5Y2VCiAgICBwbGFjZU9yZGVyKCkgewogICAgICBpZiAodGhpcy5vcHRpb25zLmhhc0V4Y2hhbmdlICE9ICcnKSB7CiAgICAgICAgY29uc29sZS5sb2coJ+inpuWPkeeCueWHu+i0reS5sDEnLCB0aGlzLmluZm8uY2hpbGRFbnVtS2V5LCB0aGlzLmZyZWUsIHRoaXMuaW5mby5jYXJkVHlwZSk7IC8vIOWIpOaWreWFkeWlluS4reW/g+i/m+WFpSAg56uL5Y2z5YWR5o2iCgogICAgICAgIGxldCBjb25kaXRpb25JbmZvID0gdGhpcy5jb25kaXRpb25JbmZvOwogICAgICAgIGxldCB0cmFjdmVsVXNlckxpc3QgPSB0aGlzLnRyYWN2ZWxVc2VyTGlzdDsKCiAgICAgICAgaWYgKGNvbmRpdGlvbkluZm8uaXNDb25kaXRpb24gJiYgdHJhY3ZlbFVzZXJMaXN0Lmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAvLyDliKTmlq3mmK/lkKbpnIDmsYLloavlhpnkv6Hmga8KICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICAgICAgbmFtZTogJ3RyYXZlbEluZm9ybWF0aW9uJywKICAgICAgICAgICAgcXVlcnk6IHsKICAgICAgICAgICAgICBhY3RTbjogdGhpcy5vcHRpb25zLmFjdFNuCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5leGNoYW5nZSgpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuaW5mby5jaGlsZEVudW1LZXkgPT0gJ0FDVF9TUEVDSUFMX09GRkVSX1BVUkNIQVNFX0xJTUlUJykgewogICAgICAgIGNvbnNvbGUubG9nKCfop6blj5Hngrnlh7votK3kubAyJywgdGhpcy5pbmZvLmNoaWxkRW51bUtleSwgdGhpcy5mcmVlLCB0aGlzLmluZm8uY2FyZFR5cGUpOyAvLyDku47pmZDotK3ov5vlhaUKCiAgICAgICAgdGhpcy5oYW5kbGVyTGltaXRFdmVudCgpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuZnJlZSAmJiB0aGlzLmluZm8uY2FyZFR5cGUgIT0gJ0NBUkRfRElSRUNUX1JFQ0hBUkdFJykgewogICAgICAgIGxldCBjb25kaXRpb25JbmZvID0gdGhpcy5jb25kaXRpb25JbmZvOwogICAgICAgIGxldCB0cmFjdmVsVXNlckxpc3QgPSB0aGlzLnRyYWN2ZWxVc2VyTGlzdDsKICAgICAgICBjb25zb2xlLmxvZygn6Kem5Y+R54K55Ye76LSt5LmwMycsIGNvbmRpdGlvbkluZm8uaXNDb25kaXRpb24sIHRoaXMuZnJlZSwgdHJhY3ZlbFVzZXJMaXN0KTsKCiAgICAgICAgaWYgKGNvbmRpdGlvbkluZm8uaXNDb25kaXRpb24gJiYgdHJhY3ZlbFVzZXJMaXN0Lmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAvLyDliKTmlq3mmK/lkKbpnIDmsYLloavlhpnkv6Hmga8KICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICAgICAgbmFtZTogJ3RyYXZlbEluZm9ybWF0aW9uJywKICAgICAgICAgICAgcXVlcnk6IHsKICAgICAgICAgICAgICBhY3RTbjogdGhpcy5vcHRpb25zLmFjdFNuCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0gLy8g5YWN6LS56aKG5Y+WCgoKICAgICAgICB0aGlzLmdldEZyZWUoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLm9wZW5fcmVjZWl2ZSkgewogICAgICAgIGNvbnNvbGUubG9nKCfop6blj5Hngrnlh7votK3kubA0JywgdGhpcy5pbmZvLmNoaWxkRW51bUtleSwgdGhpcy5mcmVlLCB0aGlzLmluZm8uY2FyZFR5cGUpOwogICAgICAgIHRoaXMub3BlblJlY2VpdmUoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zb2xlLmxvZygn6Kem5Y+R54K55Ye76LSt5LmwNScsIHRoaXMuaW5mby5jaGlsZEVudW1LZXksIHRoaXMuZnJlZSwgdGhpcy5pbmZvLmNhcmRUeXBlKTsKICAgICAgICB0aGlzLnRvQnV5KCk7CiAgICAgIH0KICAgIH0sCgogICAgaGFuZGxlckxpbWl0RXZlbnQoKSB7CiAgICAgIGlmICh0aGlzLmluZm8ubGltaXRBY3RTdGF0ZSA9PSAxMikgewogICAgICAgIHRoaXMuJFRvYXN0KCflvZPliY3lkIjovpHpnZ7ov5vooYzkuK3nirbmgIEnKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodGhpcy5idG5UZXh0ID09ICfnq4vljbPmiqLotK0nKSB7CiAgICAgICAgICB0aGlzLnRvQnV5KCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIC8vIOWFkeaNogogICAgZXhjaGFuZ2UoKSB7CiAgICAgIGxldCBpdGVtID0gdGhpcy5leGNoYW5nZV9kYXRhOwogICAgICB0aGlzLiRkaWFsb2cuY29uZmlybSh7CiAgICAgICAgdGl0bGU6IGDmmK/lkKbnoa7orqTlhZHmjaIke2l0ZW0uYWN0TmFtZSB8fCAnJ30/YCwKICAgICAgICBtZXNzYWdlOiAn5YWR5o2i5ZCO5LiN5Y+v5pu05pS55LiU5Y6f5pyJ5r2u5Y2h5bCG5Lya5riF56m6JwogICAgICB9KS50aGVuKCgpID0+IHsKICAgICAgICB0aGlzLnByaWNlRXhjaGFuZ2UoaXRlbSk7CiAgICAgIH0pLmNhdGNoKCgpID0+IHsvLyBvbiBjYW5jZWwKICAgICAgfSk7CiAgICB9LAoKICAgIC8vIOW8gOWni+WFkeaNogogICAgcHJpY2VFeGNoYW5nZShpdGVtKSB7CiAgICAgIGlmICh0aGlzLmlzQ2FuQ2xpY2spIHJldHVybjsKICAgICAgdGhpcy5pc0NhbkNsaWNrID0gdHJ1ZTsKICAgICAgdGhpcy4kYXBpLnByaWNlX2V4Y2hhbmdlKHsKICAgICAgICBhY3RTbjogaXRlbS5hY3RTbiwKICAgICAgICBhd2FyZElkOiBpdGVtLmF3YXJkSWQsCiAgICAgICAgY2l0eUlkOiB0aGlzLmxvY2F0aW9uQ2l0eS5jaXR5SWQsCiAgICAgICAgY2hvb3NlRGF0ZTogdGhpcy5zZWxEYXRlLnN0YXJ0VGltZSA/IF91dGlscy5kZWZhdWx0LmZvcm1hdFRpbWUodGhpcy5zZWxEYXRlLnN0YXJ0VGltZSB8fCAwLCAnWVlZWU1NREQnKSA6IDAsCiAgICAgICAgLy8g6Ieq5oiR5ri46YCJ5oup5pe26Ze0CiAgICAgICAgdHJhY3ZlbFVzZXJMaXN0OiBKU09OLnN0cmluZ2lmeSh0aGlzLnRyYWN2ZWxVc2VyTGlzdCkKICAgICAgfSkudGhlbihyZXMgPT4gewogICAgICAgIGlmIChyZXMuc3RhdGUpIHsKICAgICAgICAgIHRoaXMubWFzayA9IHRydWU7CiAgICAgICAgICB0aGlzLnRyYWN2ZWxVc2VyTGlzdCA9IFtdOwogICAgICAgICAgdGhpcy4kc2F2ZS5yZW1vdmUoJ3Nlc3Npb24nLCAndHJhdmVsSW5mb3JtYXRpb24nKTsKICAgICAgICAgIHRoaXMuaGFuZGxlckJ0bign5bey5YWR5o2iJywgdHJ1ZSk7IC8vIOa4hemZpOeUqOaIt+Whq+WGmeS/oeaBrwoKICAgICAgICAgIHRoaXMuJHNhdmUucmVtb3ZlKCdzZXNzaW9uJywgJ3RyYXZlbEluZm9ybWF0aW9uJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuJFRvYXN0KHJlcy5tZXNzYWdlKTsKICAgICAgICB9CiAgICAgIH0pLmZpbmFsbHkoKCkgPT4gewogICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgdGhpcy5pc0NhbkNsaWNrID0gZmFsc2U7CiAgICAgICAgfSwgMzAwKTsKICAgICAgfSk7CiAgICB9LAoKICAgIGdvQ2FyZCgpIHsKICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgIG5hbWU6ICdjb3Vwb25MaXN0JwogICAgICB9KTsKICAgIH0sCgogICAgY2xvc2UoKSB7CiAgICAgIHRoaXMubWFzayA9IGZhbHNlOwogICAgfSwKCiAgICAvLyDpnZ7kvJrlkZjlvIDpgJrlubbpooblj5YKICAgIG9wZW5SZWNlaXZlKCkgewogICAgICB0aGlzLiRzZXQodGhpcy5pbmZvLCAnc2VsbFByaWNlJywgMCk7CiAgICAgIHRoaXMuJHNldCh0aGlzLmluZm8sICdub1ZpcFByaWNlJywgMCk7CiAgICAgIGxldCByZWNlaXZlVHlwZSA9IHRoaXMub3B0aW9ucy5jaGFubmVsVHlwZSA9PSAnQ0hBTk5FTF9BQ1RJVklUWV9MQUJFTF9TSE9XJyA/IDQgOiAxOwogICAgICBsZXQgaW5mbyA9IHRoaXMuaW5mbzsKICAgICAgaW5mby5zZWxEYXRlID0gdGhpcy5zZWxEYXRlOwogICAgICBpbmZvLmRlc2NyaWJlID0gJyc7CiAgICAgIHRoaXMuJHNhdmUuc2V0KCdzZXNzaW9uJywgJ29yZGVySW5mbycsIHRoaXMuaW5mbyk7IC8vIOmdnuS8muWRmOW8gOmAmuW5tumihuWPlgoKICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgIG5hbWU6ICdzdWJtaXRPcmRlcicsCiAgICAgICAgcXVlcnk6IHsKICAgICAgICAgIGNvbXBJZDogdGhpcy5vcHRpb25zLmNvbXBJZCB8fCAnJywKICAgICAgICAgIGFjdFNuOiB0aGlzLm9wdGlvbnMuYWN0U24sCiAgICAgICAgICBjaGFubmVsVHlwZTogdGhpcy5vcHRpb25zLmNoYW5uZWxUeXBlLAogICAgICAgICAgcmVjZWl2ZVR5cGU6IHJlY2VpdmVUeXBlCiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCgogICAgLy8g5ZSu5Lu35Li6MOaXtu+8jOWFjei0uemihgogICAgZ2V0RnJlZSgpIHsKICAgICAgbGV0IGFjdERlYWwgPSBfcGF5LmRlZmF1bHQuYWN0RGVhbCh7CiAgICAgICAgY2l0eUlkOiB0aGlzLmxvY2F0aW9uQ2l0eS5jaXR5SWQsCiAgICAgICAgYWN0U246IHRoaXMub3B0aW9ucy5hY3RTbiwKICAgICAgICBkZWFsTnVtOiAxLAogICAgICAgIGNoYW5uZWxUeXBlOiB0aGlzLm9wdGlvbnMuY2hhbm5lbFR5cGUsCiAgICAgICAgcXJDb2RlOiB0aGlzLm9wdGlvbnMucXJDb2RlIHx8ICcnLAogICAgICAgIHJlYWxGZWU6IDAsCiAgICAgICAgcmVjZWl2ZVR5cGU6IHRoaXMub3B0aW9ucy5jaGFubmVsVHlwZSA9PSAnQ0hBTk5FTF9BQ1RJVklUWV9MQUJFTF9TSE9XJyA/IDQgOiAxLAogICAgICAgIC8vIOiOt+WPluaWueW8j++8jDHkvJrlkZjpooblj5bvvIwy5Lya5ZGY6LSt5Lmw77yMM+a4oOmBk+i0reS5sCB2MS4yLjDmlLnkuLoxCiAgICAgICAgb3BlblZpcDogZmFsc2UsCiAgICAgICAgLy/mmK/lkKblvIDpgJrmnIjljaHkvJrlkZjlubbotK3kubAKICAgICAgICBhY3RGZWU6IDAsCiAgICAgICAgLy/mtLvliqjmlK/ku5jotLnnlKgKICAgICAgICB2aXBGZWU6IDAsCiAgICAgICAgdmlwQ2FyZElkOiAnJywKICAgICAgICBidXlUeXBlOiAwLAogICAgICAgIGNvbXBJZDogdGhpcy5vcHRpb25zLmNvbXBJZCwKICAgICAgICAvLyDlkIjovpFJZAogICAgICAgIGNob29zZURhdGU6IHRoaXMuc2VsRGF0ZS5zdGFydFRpbWUgPyBfdXRpbHMuZGVmYXVsdC5mb3JtYXRUaW1lKHRoaXMuc2VsRGF0ZS5zdGFydFRpbWUgfHwgMCwgJ1lZWVlNTUREJykgOiAwLAogICAgICAgIC8vIOiHquaIkea4uOmAieaLqeaXtumXtAogICAgICAgIHRyYWN2ZWxVc2VyTGlzdDogSlNPTi5zdHJpbmdpZnkodGhpcy50cmFjdmVsVXNlckxpc3QpCiAgICAgIH0pOwoKICAgICAgaWYgKGFjdERlYWwpIHsKICAgICAgICBhY3REZWFsLnRoZW4ocmVzID0+IHsKICAgICAgICAgIGlmIChyZXMuc3RhdGUpIHsKICAgICAgICAgICAgdGhpcy50cmFjdmVsVXNlckxpc3QgPSBbXTsKICAgICAgICAgICAgdGhpcy4kc2F2ZS5yZW1vdmUoJ3Nlc3Npb24nLCAndHJhdmVsSW5mb3JtYXRpb24nKTsKICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgICAgICAgIG5hbWU6ICdzcGVjaWFsU2FsZVN1Y2Nlc3MnLAogICAgICAgICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICAgICAgICB0cmFkZUlkOiByZXMuaW5mby50cmFkZUlkLAogICAgICAgICAgICAgICAgYWN0TmFtZTogdGhpcy5pbmZvLmFjdE5hbWUsCiAgICAgICAgICAgICAgICByZWNlaXZlOiAxLAogICAgICAgICAgICAgICAgYWN0U246IHRoaXMub3B0aW9ucy5hY3RTbiwKICAgICAgICAgICAgICAgIHZpcF9jaGVjazogMAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7IC8vIHd4LnJlbW92ZVN0b3JhZ2UoewogICAgICAgICAgICAvLyAgIGtleTogJ3RyYXZlbEluZm9ybWF0aW9uJwogICAgICAgICAgICAvLyB9KQogICAgICAgICAgICAvLyB3eC5uYXZpZ2F0ZVRvKHsKICAgICAgICAgICAgLy8gICB1cmw6IGAvcGFnZXMvYWN0aXZpdHkvc2VsbF9kZXRhaWwvc3VjY2Vzcy9zdWNjZXNzP2FjdE5hbWU9JHt0aGlzLmluZm8uYWN0TmFtZX0mYWN0U249JHt0aGlzLm9wdGlvbnMuYWN0U259JnRyYWRlSWQ9JHtyZXMuaW5mby50cmFkZUlkfSZ2aXBfY2hlY2s9ZmFsc2VgCiAgICAgICAgICAgIC8vIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9LAoKICAgIHRvQnV5KCkgewogICAgICBpZiAodGhpcy5pc0NhbkNsaWNrKSByZXR1cm47CiAgICAgIHRoaXMuaXNDYW5DbGljayA9IHRydWU7CiAgICAgIGxldCBpbmZvID0gdGhpcy5pbmZvOwogICAgICBpbmZvLnNlbERhdGUgPSB0aGlzLnNlbERhdGU7CiAgICAgIGluZm8uZGVzY3JpYmUgPSAnJzsKICAgICAgdGhpcy4kc2F2ZS5zZXQoJ3Nlc3Npb24nLCAnb3JkZXJJbmZvJywgdGhpcy5pbmZvKTsgLy8g5Yik5pat5piv5ZCm5pyJ5pyq5pSv5LuY55qE6K6i5Y2VCgogICAgICB0aGlzLiRhcGkub3JkZXJfdW5wYXkoewogICAgICAgIGFjdFNuOiB0aGlzLm9wdGlvbnMuYWN0U24KICAgICAgfSkudGhlbihyZXMgPT4gewogICAgICAgIGlmIChyZXMuc3RhdGUpIHsKICAgICAgICAgIGlmIChyZXMuaW5mby5leGlzdHNVblBheSkgewogICAgICAgICAgICAvLyDlpoLmnpzlrZjlnKjmnKrmlK/ku5jnmoTorqLljZXvvIzot7PovazliLDorqLljZXliJfooajpobUKICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgICAgICAgIG5hbWU6ICdvcmRlckxpc3QnCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbGV0IHJlY2VpdmVUeXBlID0gdGhpcy5vcHRpb25zLmNoYW5uZWxUeXBlID09ICdDSEFOTkVMX0FDVElWSVRZX0xBQkVMX1NIT1cnID8gMyA6IDI7CiAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICAgICAgICBuYW1lOiAnc3VibWl0T3JkZXInLAogICAgICAgICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICAgICAgICBxckNvZGU6IHRoaXMub3B0aW9ucy5xckNvZGUgfHwgJycsCiAgICAgICAgICAgICAgICBjb21wSWQ6IHRoaXMub3B0aW9ucy5jb21wSWQgfHwgJycsCiAgICAgICAgICAgICAgICBhY3RTbjogdGhpcy5vcHRpb25zLmFjdFNuLAogICAgICAgICAgICAgICAgY2hhbm5lbFR5cGU6IHRoaXMub3B0aW9ucy5jaGFubmVsVHlwZSwKICAgICAgICAgICAgICAgIHJlY2VpdmVUeXBlOiByZWNlaXZlVHlwZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KS5maW5hbGx5KCgpID0+IHsKICAgICAgICB0aGlzLmlzQ2FuQ2xpY2sgPSBmYWxzZTsKICAgICAgfSk7CiAgICB9LAoKICAgIC8vIOWIpOaWreeUqOaIt+i0reS5sOS/oeaBrwogICAgZ2V0UmVhbFRpbWVJbmZvKGxpbWl0RnJlcXVlbmN5KSB7CiAgICAgIHJldHVybiB0aGlzLiRhcGkucmVhbFRpbWVfaW5mbyh7CiAgICAgICAgYWN0U246IHRoaXMub3B0aW9ucy5hY3RTbgogICAgICB9KS50aGVuKHJlcyA9PiB7CiAgICAgICAgaWYgKHJlcy5zdGF0ZSkgewogICAgICAgICAgdGhpcy5yZWFsSW5mbyA9IHJlcy5pbmZvOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAoKICAgIGhhbmRsZXJCdG4odGV4dCwgZGlzYWJsZWQgPSBmYWxzZSkgewogICAgICB0aGlzLmJ0blRleHQgPSB0ZXh0OwogICAgICB0aGlzLmJ0bkRpc2FibGVkID0gZGlzYWJsZWQ7CiAgICB9LAoKICAgIGhhbmRsZXJMaW1pdChpbmZvMiwgZmxhZykgewogICAgICAvLyAx5pyq5byA5aeLIDLov5vooYzkuK0gM+W3sue7k+adnwogICAgICBsZXQgY3VycmVudFRpbWUgPSArbmV3IERhdGUoKTsKCiAgICAgIGlmIChpbmZvMi5saW1pdEVuZFRpbWUgPCBjdXJyZW50VGltZSAmJiBpbmZvMi5saW1pdFN0YXJ0VGltZSA8IGN1cnJlbnRUaW1lKSB7CiAgICAgICAgaW5mbzIudGltZVN0YXRlID0gMzsKICAgICAgfSBlbHNlIGlmIChpbmZvMi5saW1pdEVuZFRpbWUgPiBjdXJyZW50VGltZSAmJiBpbmZvMi5saW1pdFN0YXJ0VGltZSA8IGN1cnJlbnRUaW1lKSB7CiAgICAgICAgaW5mbzIudGltZVN0YXRlID0gMjsKICAgICAgfSBlbHNlIGlmIChpbmZvMi5saW1pdFN0YXJ0VGltZSA+IGN1cnJlbnRUaW1lKSB7CiAgICAgICAgaW5mbzIudGltZVN0YXRlID0gMTsKICAgICAgICBsZXQgaGVhZGxpbmUgPSBnZXREYXlOYW1lKGluZm8yLmxpbWl0U3RhcnRUaW1lKTsKICAgICAgICB0aGlzLmhlYWRsaW5lID0gaGVhZGxpbmU7CiAgICAgIH0KCiAgICAgIGlmIChpbmZvMi50aW1lU3RhdGUgIT0gMykgewogICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5saW1pdFRpbWVyKTsKICAgICAgICB0aGlzLmxpbWl0VGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgICBsZXQgbm93VGltZSA9ICtuZXcgRGF0ZSgpOwogICAgICAgICAgdmFyIGN1dFRpbWUgPSAwOwoKICAgICAgICAgIGlmIChpbmZvMi50aW1lU3RhdGUgPT0gMSkgewogICAgICAgICAgICBjdXRUaW1lID0gaW5mbzIubGltaXRTdGFydFRpbWUgLSBub3dUaW1lOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY3V0VGltZSA9IGluZm8yLmxpbWl0RW5kVGltZSAtIG5vd1RpbWU7CiAgICAgICAgICB9CgogICAgICAgICAgbGV0IGxhc3RUaW1lID0gX3V0aWxzLmRlZmF1bHQuY291bnREb3duMyhjdXRUaW1lKTsKCiAgICAgICAgICB0aGlzLmRvd25UaW1lID0gbGFzdFRpbWU7CgogICAgICAgICAgaWYgKGN1dFRpbWUgPD0gMCAmJiBpbmZvMi5saW1pdEFjdFN0YXRlICE9IDEyKSB7CiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5saW1pdFRpbWVyKTsKICAgICAgICAgICAgdGhpcy5nZXRBY3REZXRhaWwoKTsKICAgICAgICAgIH0KICAgICAgICB9LCAxMDAwKTsKICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmRvd25UaW1lLCAndGhpcy5kb3duVGltZScpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZG93blRpbWUgPSB7CiAgICAgICAgICBob3VyOiAnMDAnLAogICAgICAgICAgbWludXRlOiAnMDAnLAogICAgICAgICAgc2Vjb25kOiAnMDAnCiAgICAgICAgfTsKICAgICAgfQoKICAgICAgaWYgKGZsYWcpIHsKICAgICAgICBjb25zb2xlLmxvZygnZmxhZycsIGluZm8yLCAnPT09PT09PT09PT09PT0nKTsgLy8g5bey5oqi5a6M5rS75Yqo5by556qXCgogICAgICAgIGlmIChpbmZvMi5saW1pdEFjdFN0YXRlID09IDMgfHwgaW5mbzIubGltaXRBY3RTdGF0ZSA9PSAyIHx8ICF0aGlzLmluZm8ucmVtYWluTnVtKSB7CiAgICAgICAgICB0aGlzLmdldEVuZEFjdGl2ZSgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICAvLyDojrflj5bmtLvliqjor6bmg4UKICAgIGFzeW5jIGdldEFjdERldGFpbChmbGFnKSB7CiAgICAgIHRoaXMuJFRvYXN0LmxvYWRpbmcoewogICAgICAgIG1lc3NhZ2U6ICfliqDovb3kuK0uLi4nLAogICAgICAgIGZvcmJpZENsaWNrOiB0cnVlLAogICAgICAgIGR1cmF0aW9uOiAwCiAgICAgIH0pOwogICAgICBhd2FpdCB0aGlzLmdldFNwZWNpYWxJbmZvKCk7IC8vIOWmguaenOaYr+eJueWNlua0u+WKqOivpuaDhe+8jGNhcmRJZO+8jGRldGFpbElk5LuO54m55Y2W6K+m5oOF6YeM6Z2i6I635Y+WCgogICAgICBhd2FpdCB0aGlzLmdldENvdXBEZXRhaWwoKTsgLy8g6I635Y+W5Y2h5Yi46K+m5oOFCgogICAgICBhd2FpdCB0aGlzLmdldFJlYWxUaW1lSW5mbygpOwogICAgICB0aGlzLmdldFN1aXRTaG9wcygpOyAvLyDojrflj5bpgILnlKjlupfpk7oKCiAgICAgIHRoaXMuJGFwaS5hY3RfZGV0YWlsKHsKICAgICAgICBjaGFubmVsVHlwZTogdGhpcy5vcHRpb25zLmNoYW5uZWxUeXBlLAogICAgICAgIHFyQ29kZTogdGhpcy5vcHRpb25zLnFyQ29kZSB8fCAnJywKICAgICAgICBhY3RTbjogdGhpcy5vcHRpb25zLmFjdFNuCiAgICAgIH0pLnRoZW4oYXN5bmMgcmVzID0+IHsKICAgICAgICBpZiAocmVzLnN0YXRlKSB7CiAgICAgICAgICBsZXQgaW5mbzEgPSB0aGlzLmluZm87CiAgICAgICAgICBsZXQgaW5mbzIgPSByZXMuaW5mbzsKICAgICAgICAgIGxldCBjb250YXRpb24gPSBpbmZvMi5idXlMaW1pdCA9PSAxICYmICFpbmZvMi5zZWxsUHJpY2UgJiYgIWluZm8yLm5vVmlwUHJpY2UgfHwgaW5mbzIuYnV5TGltaXQgPT0gMiAmJiAhaW5mbzIuc2VsbFByaWNlOyAvLyDliKTmlq3lt7Lpooblj5bnmoTnirbmgIEKICAgICAgICAgIC8vIOWkhOeQhumZkOaXtueahOWAkuiuoeaXtuetiemXrumimCAKCiAgICAgICAgICBpZiAoaW5mbzIuY2hpbGRFbnVtS2V5ID09ICdBQ1RfU1BFQ0lBTF9PRkZFUl9QVVJDSEFTRV9MSU1JVCcpIHsKICAgICAgICAgICAgdGhpcy5oYW5kbGVyTGltaXQoaW5mbzIsIGZsYWcpOwogICAgICAgICAgfQoKICAgICAgICAgIGluZm8xLmNoYW5uZWxUeXBlID0gdGhpcy5vcHRpb25zLmNoYW5uZWxUeXBlIHx8ICcnOwogICAgICAgICAgbGV0IGluZm8gPSB7IC4uLmluZm8xLAogICAgICAgICAgICAuLi5pbmZvMgogICAgICAgICAgfTsKICAgICAgICAgIHRoaXMuaW5mbyA9IGluZm87CiAgICAgICAgICB0aGlzLnJlbWFpblRpbWUgPSBpbmZvMi5yZW1haW5UaW1lOwogICAgICAgICAgdGhpcy5yZWFkeSA9IHRydWU7CiAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmluZm8sICdpbmZvMWluZm8xaW5mbzFpbmZvMWluZm8xJyk7IC8vIOiHquaIkea4uOeJueWNluaXtumcgOiwg+eUqOaXpeWOhuaOpeWPoyAo5Y2h5Yi45pyJ5pWI5pyf57G75Z6L5Li6IDMsNCw1KQoKICAgICAgICAgIGlmICh0aGlzLmluZm8uc3VwcGxpZXJDb2RlID09ICdQQVJUWV9aV1knKSB7CiAgICAgICAgICAgIC8vIOiHquaIkea4uOaYvuekuuS8muWRmOS7t++8iOmAieaLqeaXpeacn+WQjui/memHjOeahOS7t+agvOS4jeWPmO+8iQogICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5pbmZvLCAndHJhdmVsUHJpY2UnLCBpbmZvMi5zZWxsUHJpY2UpOwoKICAgICAgICAgICAgaWYgKHRoaXMuc2VsRGF0ZS5zZWxsUHJpY2UgfHwgdGhpcy5zZWxEYXRlLnNlbGxQcmljZSA9PSAwKSB7CiAgICAgICAgICAgICAgLy8g5Yik5pat5bey6YCJ5oup55qE5Lu35qC8CiAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuaW5mbywgJ3NlbGxQcmljZScsIHRoaXMuc2VsRGF0ZS5zZWxsUHJpY2UpOwogICAgICAgICAgICAgIHRoaXMuJHNldCh0aGlzLmluZm8sICdub1ZpcFByaWNlJywgdGhpcy5zZWxEYXRlLm5vVmlwUHJpY2UpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoWzMsIDQsIDVdLmluY2x1ZGVzKGluZm8xLnZhbGlkaXR5VHlwZSkpIHsvLyDliKTmlq3pgInlrprml6XmnJ/vvIzmmL7npLrml6XljoYKICAgICAgICAgICAgICAvLyB0aGlzLnRyYXZlbEFjdE1vbnRoKCkKICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmluZm8ubGltaXRUaW1lID4gMCkgewogICAgICAgICAgICAgIC8vIOWIpOaWreW9k+WJjeaXtumXtOaYr+WQpuWPr+i0reS5sCAKICAgICAgICAgICAgICBsZXQgbGltaXRUaW1lID0gdGhpcy5pbmZvLmxpbWl0VGltZTsKICAgICAgICAgICAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7CiAgICAgICAgICAgICAgbGV0IGggPSBkYXRlLmdldEhvdXJzKCkgPiA5ID8gZGF0ZS5nZXRIb3VycygpICsgJycgOiAnMCcgKyBkYXRlLmdldEhvdXJzKCk7CiAgICAgICAgICAgICAgdmFyIG0gPSBkYXRlLmdldE1pbnV0ZXMoKSA+IDkgPyBkYXRlLmdldE1pbnV0ZXMoKSArICcnIDogJzAnICsgZGF0ZS5nZXRNaW51dGVzKCk7CiAgICAgICAgICAgICAgbGV0IGRheVRpbWUgPSBoICsgbTsKCiAgICAgICAgICAgICAgaWYgKGRheVRpbWUgPiBsaW1pdFRpbWUpIHsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXJCdG4oJ+W9k+WJjeS4jeWPr+i0reS5sCcsIHRydWUpOwogICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLmhhbmRsZXJCdG4odGhpcy5pbmZvLmNhcmRUeXBlID09PSAnQ0FSRF9ESVJFQ1RfUkVDSEFSR0UnID8gJ+eri+WNs+WFheWAvCcgOiAn56uL5Y2z6LSt5LmwJyk7IC8vIOS7hemZkOS8muWRmOi0reS5sO+8jOmdnuS8muWRmOaYvuekugoKICAgICAgICAgIGlmIChpbmZvMi5idXlMaW1pdCA9PSAyICYmICF0aGlzLnZpcFVzZXIpIHsKICAgICAgICAgICAgdGhpcy5oYW5kbGVyQnRuKCflvIDpgJrlubbotK3kubAnKTsKICAgICAgICAgIH0gLy8g5LuF6ZmQ5Lya5ZGY6LSt5Lmw5LiU5Lya5ZGY5ZSu5Lu35Li6MO+8jOmdnuS8muWRmOinhuinkgoKCiAgICAgICAgICBpZiAoaW5mbzIuYnV5TGltaXQgPT0gMiAmJiAhaW5mbzIuc2VsbFByaWNlICYmICF0aGlzLnZpcFVzZXIpIHsKICAgICAgICAgICAgdGhpcy5oYW5kbGVyQnRuKCflvIDpgJrlubbpooblj5YnKTsKICAgICAgICAgICAgdGhpcy5vcGVuX3JlY2VpdmUgPSB0cnVlOyAvLyDmoIflv5fmmK/lvIDpgJrlubbpooblj5bmjInpkq4KICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodGhpcy5pbmZvLnJlbWFpbk51bSA+IDAgfHwgdGhpcy5pbmZvLmNhcmRUeXBlID09PSAnQ0FSRF9ESVJFQ1RfUkVDSEFSR0UnKSB7CiAgICAgICAgICAgIGlmICh0aGlzLmluZm8uY2hhbm5lbFR5cGUgPT0gJ0NIQU5ORUxfQ09OU1VNRVJfQ09VUE9OJyB8fCB0aGlzLmluZm8uY2hhbm5lbFR5cGUgPT0gJ0NIQU5ORUxfRk9SVFVORV9DT1VQT04nKSB7CiAgICAgICAgICAgICAgLy8g5raI6LS55Yi45rig6YGT5pe277yM5Yik5pat5Y6f5Lu3CiAgICAgICAgICAgICAgaWYgKGluZm8yLndvcnRoID09IDApIHsKICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlckJ0bign56uL5Y2z6aKG5Y+WJyk7CiAgICAgICAgICAgICAgICB0aGlzLmZyZWUgPSB0cnVlOyAvL+WPr+S7peWFjei0uemihuWPlgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBpZiAoIWluZm8yLnNlbGxQcmljZSAmJiB0aGlzLnZpcFVzZXIgfHwgaW5mbzIuYnV5TGltaXQgPT0gMSAmJiAhaW5mbzIuc2VsbFByaWNlICYmICFpbmZvMi5ub1ZpcFByaWNlKSB7CiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXJCdG4oJ+eri+WNs+mihuWPlicpOwogICAgICAgICAgICAgICAgdGhpcy5mcmVlID0gdHJ1ZTsgLy/lj6/ku6XlhY3otLnpooblj5YKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIOW6k+WtmOS4ujDml7YKICAgICAgICAgICAgaWYgKGNvbnRhdGlvbikgewogICAgICAgICAgICAgIHRoaXMuaGFuZGxlckJ0bign5bey6aKG5a6MJywgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhpcy5oYW5kbGVyQnRuKCflt7LllK7nvYQnLCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmIChpbmZvMi5hY3RTdGF0ZSA9PSAzIHx8IGluZm8yLmFjdFN0YXRlID09IDQgfHwgaW5mbzIuYWN0U3RhdGUgPT0gNSkgewogICAgICAgICAgICAvL+WUruS7t+mDveS4ujAKICAgICAgICAgICAgaWYgKGNvbnRhdGlvbikgewogICAgICAgICAgICAgIHRoaXMuaGFuZGxlckJ0bign5bey6aKG5a6MJywgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhpcy5oYW5kbGVyQnRuKCflt7LllK7nvYQnLCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmIChpbmZvMi5hY3RTdGF0ZSA9PSAxKSB7CiAgICAgICAgICAgIHRoaXMuaGFuZGxlckJ0bign5rS75Yqo5pyq5byA5aeLJywgdHJ1ZSk7CiAgICAgICAgICB9IGVsc2UgaWYgKGluZm8yLmFjdFN0YXRlID09IDIwKSB7CiAgICAgICAgICAgIC8vIOiHquaIkea4uOWNoeWIuOW9k+WJjeaXtumXtOS4jeWPr+i0reS5sAogICAgICAgICAgICB0aGlzLmhhbmRsZXJCdG4oJ+W9k+WJjeS4jeWPr+i0reS5sCcsIHRydWUpOwogICAgICAgICAgfQoKICAgICAgICAgIGxldCB0b3RhbE51bSA9IE51bWJlcih0aGlzLnJlYWxJbmZvLnVzZXJCdXlOdW0pICsgTnVtYmVyKHRoaXMucmVhbEluZm8udXNlckZyZWVSZWNlaXZlTnVtKTsgLy8g5b2T5YmN55So5oi355qE6LSt5Lmw5pWw6YeP5ZKM6aKG5Y+W5pWw6YeP5oC75ZKMCiAgICAgICAgICAvLyDmmK/lkKbpmZDliLbotK3kubAKCiAgICAgICAgICBpZiAoaW5mbzIubGltaXRTdGF0ZSkgewogICAgICAgICAgICBpZiAodG90YWxOdW0gPj0gaW5mbzIubGltaXRGcmVxdWVuY3kpIHsKICAgICAgICAgICAgICAvLyDnlKjmiLfmgLvmiJDlip/otK3kubDmlbDph4/lpKfkuo7pmZDliLbotK3kubDmlbDph48KICAgICAgICAgICAgICB0aGlzLmhhbmRsZXJCdG4oJ+W3sui0reS5sCcsIHRydWUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAodG90YWxOdW0gPj0gaW5mbzIubGltaXRGcmVxdWVuY3kgJiYgY29udGF0aW9uKSB7CiAgICAgICAgICAgICAgLy8g5b2T5YmN55So5oi35b2T5YmN5rS75Yqo5Lit5oC75YWN6LS56aKG5Y+W5pWw6YeP5aSn5LqO6ZmQ5Yi26aKG5Y+W5pWw6YePCiAgICAgICAgICAgICAgdGhpcy5oYW5kbGVyQnRuKCflt7Lpooblj5YnLCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMuc2hvd0J0blR4dCA9IHRydWU7IC8vIC4uLi4uLi4uLi4uLi4uLi4u5LyY5YyW5paw5aKeLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgogICAgICAgICAgLy8g5Yik5pat5LuO6ZmQ6LSt6L+b5YWlCgogICAgICAgICAgaWYgKGluZm8yLmNoaWxkRW51bUtleSA9PSAnQUNUX1NQRUNJQUxfT0ZGRVJfUFVSQ0hBU0VfTElNSVQnKSB7CiAgICAgICAgICAgIGlmICghdGhpcy5pbmZvLnJlbWFpbk51bSkgewogICAgICAgICAgICAgIHRoaXMuaGFuZGxlckJ0bign5bey5oqi5a6MJywgdHJ1ZSk7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAocmVzLmluZm8uYWN0U3RhdGUgPT0gMTEgfHwgcmVzLmluZm8uYWN0U3RhdGUgPT0gMykgewogICAgICAgICAgICAgIHRoaXMuaGFuZGxlckJ0bign5bey5oqi5a6MJywgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gaWYgKHJlcy5pbmZvLmxpbWl0QWN0U3RhdGUgPT0gOCkgewogICAgICAgICAgICAgIC8vICAgdGhpcy5oYW5kbGVyQnRuKCfpooTnuqbmj5DphpInLCBmYWxzZSkKICAgICAgICAgICAgICAvLyB9IGVsc2UgaWYgKHJlcy5pbmZvLmxpbWl0QWN0U3RhdGUgPT0gOSkgewogICAgICAgICAgICAgIC8vICAgdGhpcy5oYW5kbGVyQnRuKCflt7LpooTnuqYnLCBmYWxzZSkKICAgICAgICAgICAgICAvLyB9IAogICAgICAgICAgICAgIGlmIChyZXMuaW5mby5saW1pdEFjdFN0YXRlID09IDggfHwgcmVzLmluZm8ubGltaXRBY3RTdGF0ZSA9PSA5KSB7CiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXJCdG4oJ+acquW8gOWniycsIHRydWUpOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzLmluZm8ubGltaXRBY3RTdGF0ZSA9PSAxKSB7CiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXJCdG4oJ+eri+WNs+aKoui0rScsIGZhbHNlKTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcy5pbmZvLmxpbWl0QWN0U3RhdGUgPT0gMTApIHsKICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlckJ0bign5bey6LSt5LmwJywgdHJ1ZSk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXMuaW5mby5saW1pdEFjdFN0YXRlID09IDMpIHsKICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlckJ0bign5bey5oqi5a6MJywgdHJ1ZSk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXMuaW5mby5saW1pdEFjdFN0YXRlID09IDIpIHsKICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlckJ0bign5bey5oqi5a6MJywgdHJ1ZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IC8vIOWIpOaWreS4uuWFkeaNouS4reW/g+i/m+WFpQoKCiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhhc0V4Y2hhbmdlICE9ICcnKSB7CiAgICAgICAgICAgIGxldCBleGNoYW5nZV9kYXRhID0gdGhpcy5leGNoYW5nZV9kYXRhOyAvLyDlhZHmjaLkuK3lv4PmtLvliqjmlbDmja4KCiAgICAgICAgICAgIGlmIChleGNoYW5nZV9kYXRhLmhhc0V4Y2hhbmdlKSB7CiAgICAgICAgICAgICAgdGhpcy5oYW5kbGVyQnRuKCflt7LlhZHmjaInLCB0cnVlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBpZiAoZXhjaGFuZ2VfZGF0YS5yZW1haW5OdW0gPiAwKSB7CiAgICAgICAgICAgICAgICBpZiAoZXhjaGFuZ2VfZGF0YS5zdGF0ZSAhPSAyKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlckJ0bign5bey57uT5p2fJywgdHJ1ZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBpZiAoZXhjaGFuZ2VfZGF0YS5jb25kaXRpb24pIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXJCdG4oJ+eri+WNs+WFkeaNoicsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXJCdG4oJ+eri+WNs+WFkeaNoicsIHRydWUpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlckJ0bign5bey5YWR5a6MJywgdHJ1ZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IC8vIOWmguaenOmcgOimgeaYvuekuuWAkuiuoeaXtgoKCiAgICAgICAgICBpZiAoaW5mbzIuc2hvd1RpbWUgJiYgaW5mbzIuY2hpbGRFbnVtS2V5ICE9ICdBQ1RfU1BFQ0lBTF9PRkZFUl9QVVJDSEFTRV9MSU1JVCcpIHsKICAgICAgICAgICAgLy8gLi4uLi4uLi4uLi4uLi4uLi4u5LyY5YyW57uT5p2fLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTsKICAgICAgICAgICAgdmFyIHJlbWFpblRpbWUgPSB0aGlzLnJlbWFpblRpbWU7CiAgICAgICAgICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgICAgICAgaWYgKHJlbWFpblRpbWUgPj0gMTAwMCkgewogICAgICAgICAgICAgICAgcmVtYWluVGltZSAtPSAxMDAwOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGhpcy5yZW1haW5UaW1lID0gcmVtYWluVGltZSB8fCAwOwogICAgICAgICAgICB9LCAxMDAwKTsKICAgICAgICAgIH0gLy8gdGhpcy5nZXRDYXNoTnVtKCkgLy8g6I635Y+W5b2T5YmN5rS75Yqo5Y+v55So5oq15omj5pyA5aSn6YeR6aKd57qi5YyFCgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmJhY2tfdG8ocmVzKTsKICAgICAgICB9CiAgICAgIH0pLmZpbmFsbHkoKCkgPT4gewogICAgICAgIHRoaXMuJFRvYXN0LmNsZWFyKCk7CiAgICAgIH0pOwogICAgfSwKCiAgICAvLyDojrflj5bmtLvliqjljaHliLjor6bmg4UKICAgIGdldENvdXBEZXRhaWwoKSB7CiAgICAgIHJldHVybiB0aGlzLiRhcGkuYWN0X2NhcmRfZGV0YWlsKHsKICAgICAgICBjYXJkSWQ6IHRoaXMuY2FyZElkLAogICAgICAgIGRldGFpbElkOiB0aGlzLmRldGFpbElkLAogICAgICAgIGFjdFNuOiB0aGlzLm9wdGlvbnMuYWN0U24KICAgICAgfSkudGhlbihyZXMgPT4gewogICAgICAgIGlmIChyZXMuc3RhdGUpIHsKICAgICAgICAgIHRoaXMuaW5mbyA9IHsgLi4udGhpcy5pbmZvLAogICAgICAgICAgICAuLi5yZXMuaW5mbwogICAgICAgICAgfTsKICAgICAgICAgIHRoaXMubWVkaWFMaXN0ID0gcmVzLmluZm8ubWVkaWFMaXN0OwoKICAgICAgICAgIGlmIChyZXMuaW5mby5zaG9wU2hvdykgewogICAgICAgICAgICB0aGlzLmdldFN1aXRTaG9wcygpOwogICAgICAgICAgfSAvLyDoh6rmiJHmuLjljaHliLjml7bllYblrrbor6bmg4XmmL7npLrkuLrlm77mlofor6bmg4UKCgogICAgICAgICAgaWYgKHRoaXMuaW5mby5kZXNjcmliZSkgewogICAgICAgICAgICB0aGlzLmdyYXBoaWNEZXRhaWwgPSB0aGlzLmluZm8uZGVzY3JpYmU7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5nZXRGaXhlZERldGFpbChyZXMuaW5mby5zaG9wU24pOyAvLyDojrflj5bllYblrrbor6bmg4UKICAgICAgICB9IGVsc2Ugey8vIHRoaXMuYmFja190byhyZXMpCiAgICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKCiAgICAvLyDnibnljZbmtLvliqjnibnmnInkv6Hmga8KICAgIGdldFNwZWNpYWxJbmZvKCkgewogICAgICByZXR1cm4gdGhpcy4kYXBpLnNwZWNpYWxfc2VsbF9pbmZvKHsKICAgICAgICBjaGFubmVsVHlwZTogdGhpcy5vcHRpb25zLmNoYW5uZWxUeXBlIHx8ICcnLAogICAgICAgIHFyQ29kZTogdGhpcy5vcHRpb25zLnFyQ29kZSB8fCAnJywKICAgICAgICBhY3RTbjogdGhpcy5vcHRpb25zLmFjdFNuCiAgICAgIH0pLnRoZW4ocmVzID0+IHsKICAgICAgICBjb25zb2xlLmxvZygnc3BlY2lhbF9zZWxsX2luZm8nLCByZXMuaW5mbyk7CgogICAgICAgIGlmIChyZXMuc3RhdGUpIHsKICAgICAgICAgIHRoaXMuY2FyZElkID0gcmVzLmluZm8uY2FyZElkLCB0aGlzLmRldGFpbElkID0gcmVzLmluZm8uZGV0YWlsSWQ7CiAgICAgICAgICB0aGlzLmluZm8gPSB7IC4uLnRoaXMuaW5mbywKICAgICAgICAgICAgLi4ucmVzLmluZm8KICAgICAgICAgIH07CiAgICAgICAgfSBlbHNlIHsvLyB0aGlzLmJhY2tfdG8ocmVzKQogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAoKICAgIC8vIOiOt+WPluWVhuWutuWbuuWumuS/oeaBrwogICAgZ2V0Rml4ZWREZXRhaWwoc2hvcFNuKSB7CiAgICAgIHRoaXMuJGFwaS5zaG9wX2ZpeGVkX2RldGFpbCh7CiAgICAgICAgc2hvcFNuLAogICAgICAgIGxhdDogdGhpcy5sb2NhdGlvbkluZm8ubGF0aXR1ZGUsCiAgICAgICAgbG5nOiB0aGlzLmxvY2F0aW9uSW5mby5sb25naXR1ZGUKICAgICAgfSkudGhlbihyZXMgPT4gewogICAgICAgIGlmIChyZXMuc3RhdGUpIHsKICAgICAgICAgIHRoaXMuZml4ZWREZXRhaWwgPSByZXMuaW5mby5zaG9wOwoKICAgICAgICAgIGlmICghdGhpcy5pbmZvLmRlc2NyaWJlKSB7CiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY0RldGFpbCA9IHJlcy5pbmZvLnNob3AuZGV0YWlsOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAoKICAgIC8vIOWFs+mXree6ouWMheWIl+ihqAogICAgY29sc2VjYXNoTWFzaygpIHsKICAgICAgdGhpcy5jYXNoTWFzayA9ICF0aGlzLmNhc2hNYXNrOwogICAgfSwKCiAgICAvLyDojrflj5bmtLvliqjnuqLljIXlvZPliY3kuqvnlKjmnIDlpKfnuqLljIUKICAgIGdldENhc2hOdW0oKSB7CiAgICAgIHRoaXMuJFRvYXN0LmxvYWRpbmcoewogICAgICAgIG1lc3NhZ2U6ICfliqDovb3kuK0uLi4nLAogICAgICAgIGZvcmJpZENsaWNrOiB0cnVlLAogICAgICAgIGR1cmF0aW9uOiAwCiAgICAgIH0pOwogICAgICBsZXQgdmlwX2NoZWNrID0gIXRoaXMudmlwVXNlciAmJiB0aGlzLmluZm8uYnV5TGltaXQgPT0gMiA/IHRydWUgOiBmYWxzZTsKICAgICAgbGV0IHByaWNlID0gdGhpcy5pbmZvLmJ1eUxpbWl0ID09IDIgfHwgdGhpcy52aXBVc2VyID8gdGhpcy5pbmZvLnNlbGxQcmljZSA6IHRoaXMuaW5mby5ub1ZpcFByaWNlOwogICAgICB0aGlzLiRhcGkuY2FzaF9yZWRfbGlzdCh7CiAgICAgICAgYWN0U246IHRoaXMub3B0aW9ucy5hY3RTbiwKICAgICAgICBjaXR5SWQ6IHRoaXMubG9jYXRpb25DaXR5LmNpdHlJZCwKICAgICAgICBvcGVuVmlwOiB2aXBfY2hlY2ssCiAgICAgICAgLy8g5piv5ZCm5Yu+6YCJ5Lya5ZGY5Y2hCiAgICAgICAgdmlwRmVlOiB2aXBfY2hlY2sgPyB0aGlzLnZpcEZlZSA6IDAsCiAgICAgICAgLy8g5Lya5ZGY5Y2h6YeR6aKdCiAgICAgICAgYWN0RmVlOiBwcmljZSwKICAgICAgICAvLyDmtLvliqjph5Hpop0KICAgICAgICBjYXJkSWQ6IHRoaXMuaW5mby5jYXJkSWQgLy8g54m55Y2W5Y2h5Yi4aWQgfHwg56S85YyF5Lyg56m6CgogICAgICB9KS50aGVuKHJlcyA9PiB7CiAgICAgICAgaWYgKHJlcy5zdGF0ZSkgewogICAgICAgICAgbGV0IHJlZExpc3QgPSByZXMuaW5mby5jYXNoUmVkTGlzdCB8fCBbXTsKICAgICAgICAgIGxldCBjb25zdW1lckNvdXBvbkxpc3QgPSByZXMuaW5mby5jb25zdW1lckNvdXBvbkxpc3QgfHwgW107CiAgICAgICAgICBsZXQgdXNhYmxlTGlzdCA9IHJlZExpc3QuZmlsdGVyKGl0ZW0gPT4gaXRlbS5jdXJyZW50QWJsZVVzZSk7IC8vIOi/h+a7pOWPr+eUqOe6ouWMhQoKICAgICAgICAgIGxldCBzb3J0VXNhYmxlTGlzdCA9IHVzYWJsZUxpc3Quc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICAvLyDpmY3luo/mjpLluo8KICAgICAgICAgICAgcmV0dXJuIGIubW9uZXkgLSBhLm1vbmV5OwogICAgICAgICAgfSk7CiAgICAgICAgICB0aGlzLnNlbENhc2hyZWQgPSBzb3J0VXNhYmxlTGlzdFswXTsgLy8g6YCJ5Lit5pyA5aSn57qi5YyFCgogICAgICAgICAgaWYgKGNvbnN1bWVyQ291cG9uTGlzdC5sZW5ndGgpIHsKICAgICAgICAgICAgdGhpcy5zZWxDb25zdW1lciA9IGNvbnN1bWVyQ291cG9uTGlzdFswXSB8fCB7fTsgLy8g6YCJ5Lit5raI6LS55Yi4CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KS5maW5hbGx5KCgpID0+IHsKICAgICAgICB0aGlzLiRUb2FzdC5jbGVhcigpOwogICAgICB9KTsKICAgIH0sCgogICAgLy8g6I635Y+W5Lya5ZGY5Y2h5pyA5L2O5Lu35qC8CiAgICB2aXBQcmljZSgpIHsKICAgICAgdGhpcy4kYXBpLnYxXzRfdmlwX2xvd1ByaWNlKHsKICAgICAgICB0b3BpY1R5cGU6IDEsCiAgICAgICAgdG9waWNTbjogdGhpcy5vcHRpb25zLmFjdFNuCiAgICAgIH0pLnRoZW4ocmVzID0+IHsKICAgICAgICBpZiAocmVzLnN0YXRlKSB7CiAgICAgICAgICB0aGlzLnZpcEZlZSA9IHJlcy5pbmZvID8gcmVzLmluZm8ubG93UHJpY2UgfHwgMCA6IDA7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCgogICAgLy8g5YWz6Zet57qi5YyF5by556qX5pe2CiAgICBoYXNDYWNoUmVkTGlzdCh7CiAgICAgIGRldGFpbAogICAgfSkgewogICAgICBpZiAoZGV0YWlsICYmIGRldGFpbC5sZW5ndGggPiAwKSB7CiAgICAgICAgLy8g6YeN5paw6K+35rGC57qi5YyF5o6l5Y+jCiAgICAgICAgLy8gdGhpcy5zZWxlY3RDb21wb25lbnQoJyNhY3RpdmVDYXNoJykuZ2V0Q2FzaExpc3QoKQogICAgICAgIHRoaXMuZ2V0Q2FzaE51bSgpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc2hvd1BhZ2VNb2RlbCA9IHRydWU7CiAgICAgIH0KICAgIH0sCgogICAgLy8g6Ieq5oiR5ri45rS75Yqo6K+m5oOF6YCJ5oup5Lu35qC8CiAgICAvLyBzZWxEYXRlTGlzdCh7IGN1cnJlbnRUYXJnZXQgfSkgewogICAgLy8gICBsZXQgaXRlbSA9IGN1cnJlbnRUYXJnZXQuZGF0YXNldC5pdGVtCiAgICAvLyAgIGxldCBkYXRlID0gewogICAgLy8gICAgIHRleHQ6IGl0ZW0uZGF0ZS5zdWJzdHIoMCwgNiksCiAgICAvLyAgICAgbW9udGg6IGl0ZW0uZGF0ZS5zdWJzdHIoNCwgMiksCiAgICAvLyAgICAgeWVhcjogaXRlbS5kYXRlLnN1YnN0cigwLCA0KSwKICAgIC8vICAgICBkYXk6IGl0ZW0uZGF0ZS5zdWJzdHIoNiwgMikKICAgIC8vICAgfQogICAgLy8gICB0aGlzLnNlbGVjdENvbXBvbmVudCgiI2NhbGVuZGFyIikuc2hvd0NhbGVuZGFyRGF0YShkYXRlKQogICAgLy8gICB0aGlzLm9wZW5DYWxlbmRhcigpIC8vIOaYvuekuuaXpeWOhuW8ueeqlwogICAgLy8gfSwKICAgIG9wZW5DYWxlbmRhcigpIHsKICAgICAgdGhpcy5jYWxlbmRhck1hc2sgPSB0cnVlOwogICAgfSwKCiAgICB0cmF2ZWxNb250aEluZm8oewogICAgICBkZXRhaWwKICAgIH0pIHsKICAgICAgLy8g5o6l5pS25pel5Y6G5L+h5oGvCiAgICAgIGlmIChkZXRhaWwuZGF0YVR5cGUgPT0gJ2luaXQnKSB7CiAgICAgICAgLy8g5pel5Y6G5Yid5aeL5YyW5pWw5o2uCiAgICAgICAgdGhpcy50cmF2ZWxNb250aEluZm8gPSBkZXRhaWw7CgogICAgICAgIGlmIChkZXRhaWwudW5hYmxlQnV5KSB7CiAgICAgICAgICB0aGlzLmhhbmRsZXJCdG4oJ+W9k+WJjeS4jeWPr+i0reS5sCcsIHRydWUpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChkZXRhaWwuZGF0YVR5cGUgPT0gJ3NlbERhdGUnKSB7CiAgICAgICAgLy8g6YCJ5oup5pel5Y6G5L+h5oGvCiAgICAgICAgbGV0IGluZm8gPSB0aGlzLmluZm87CiAgICAgICAgaW5mby5zZWxsUHJpY2UgPSBkZXRhaWwuc2VsbFByaWNlOwogICAgICAgIGluZm8ubm9WaXBQcmljZSA9IGRldGFpbC5ub1ZpcFByaWNlOwogICAgICAgIHRoaXMuaW5mbyA9IGluZm87CiAgICAgICAgdGhpcy5zZWxEYXRlID0gZGV0YWlsOwogICAgICB9CiAgICB9LAoKICAgIGdldFJlY2VpdmVDb25kaXRpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLiRhcGkucmVjZWl2ZV9jb25kaXRpb24oewogICAgICAgIGFjdFNuOiB0aGlzLm9wdGlvbnMuYWN0U24KICAgICAgfSkudGhlbihyZXMgPT4gewogICAgICAgIGlmIChyZXMuc3RhdGUpIHsKICAgICAgICAgIHRoaXMuY29uZGl0aW9uSW5mbyA9IHJlcy5pbmZvOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogIH0sCgogIGNyZWF0ZWQoKSB7CiAgICBjb25zdCBvcHRpb25zID0gdGhpcy4kcm91dGUucXVlcnk7CiAgICBvcHRpb25zLmhhc0V4Y2hhbmdlID0gb3B0aW9ucy5oYXNFeGNoYW5nZSB8fCAnJzsKICAgIG9wdGlvbnMudHlwZSA9IG9wdGlvbnMudHlwZSB8fCAnJzsKICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7CgogICAgaWYgKG9wdGlvbnMucG9wdXApIHsKICAgICAgdGhpcy4kZGlhbG9nLmFsZXJ0KHsKICAgICAgICB0aXRsZTogJ+aPkOekuicsCiAgICAgICAgbWVzc2FnZTogJ+iuouWNlei2heaXtuW3suWPlua2iO+8jOivt+mHjeaWsOS4i+WNlScsCiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponLAogICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyNEOTA2MzQnCiAgICAgIH0pOwogICAgfQoKICAgIHRoaXMuZ2V0QWN0RGV0YWlsKHRydWUpOwogICAgdGhpcy52aXBQcmljZSgpOwoKICAgIGlmICh0aGlzLm9wdGlvbnMuaGFzRXhjaGFuZ2UgIT0gJycpIHsKICAgICAgLy8g5Yik5pat5Li65YWR5o2i5Lit5b+D6L+b5YWlCiAgICAgIHRoaXMuZXhjaGFuZ2VfZGF0YSA9IHRoaXMuJHNhdmUuZ2V0KCdzZXNzaW9uJywgJ2V4Y2hhbmdlX2RhdGEnKTsgLy8g5YWR5o2i5Lit5b+D5rS75Yqo5pWw5o2uCiAgICB9CgogICAgdGhpcy5nZXRSZWNlaXZlQ29uZGl0aW9uKCk7IC8vIOaYr+WQpumcgOimgeWhq+WGmeeUqOaIt+S/oeaBr+WPiuWFtuadoeS7tgoKICAgIHRoaXMubmVlZEF1dGggPSB0aGlzLm5lZWRBdXRoOwogICAgdGhpcy5nZXRGcmVlQmFnID0gdGhpcy5nZXRGcmVlQmFnOwogICAgdGhpcy52aXBVc2VyID0gdGhpcy52aXBDYXJkSW5mby52aXBVc2VyOwogICAgdGhpcy5zZWxDYXNocmVkID0ge307CgogICAgaWYgKHRoaXMuYWN0RGV0YWxVcGRhdGUpIHsKICAgICAgLy8g5Yi35paw5rS75Yqo5pWw5o2uCiAgICAgIHRoaXMuZ2V0QWN0RGV0YWlsKHRydWUpOwogICAgICB0aGlzLmFjdERldGFsVXBkYXRlID0gZmFsc2U7CiAgICB9IC8vIOa0u+WKqOS7t+agvOWIt+aWsAoKCiAgICBpZiAodGhpcy51cGRhdGVGbGFnKSB7CiAgICAgIHRoaXMucmVmcmVzaCA9IHRydWU7CiAgICB9IC8vIOeUqOaIt+S/oeaBr+aVsOaNrgoKCiAgICBsZXQgdHJhdmVsSW5mb3JtYXRpb24gPSB0aGlzLiRzYXZlLmdldCgnc2Vzc2lvbicsICd0cmF2ZWxJbmZvcm1hdGlvbicpOwoKICAgIGlmICh0cmF2ZWxJbmZvcm1hdGlvbikgewogICAgICB0aGlzLnRyYWN2ZWxVc2VyTGlzdCA9IHRyYXZlbEluZm9ybWF0aW9uLmZvcm1MaXN0OwogICAgICB0aGlzLnNlbERhdGUgPSB0cmF2ZWxJbmZvcm1hdGlvbi5zZWxEYXRlOwoKICAgICAgaWYgKHRoaXMub3B0aW9ucy5oYXNFeGNoYW5nZSAhPSAnJykgewogICAgICAgIHRoaXMuZXhjaGFuZ2UoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmZyZWUpIHsKICAgICAgICAvLyDlhY3otLnpooblj5YKICAgICAgICB0aGlzLmdldEZyZWUoKTsKICAgICAgfQogICAgfQogIH0sCgogIGFjdGl2YXRlZCgpIHt9LAoKICBkZXN0cm95ZWQoKSB7CiAgICAvLyDmuIXpmaTnlKjmiLfloavlhpnkv6Hmga8KICAgIHRoaXMuJHNhdmUucmVtb3ZlQXJyKCdzZXNzaW9uJywgWyd0cmF2ZWxJbmZvcm1hdGlvbicsICd1cGRhdGVGbGFnJ10pOwogIH0KCn07CmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0Ow=="},null]}