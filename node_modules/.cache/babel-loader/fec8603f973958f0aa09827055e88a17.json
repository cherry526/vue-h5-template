{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\src\\views\\order\\orderDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\src\\views\\order\\orderDetail.vue","mtime":1596624611552},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKCJDOi9Vc2Vycy9BZG1pbmlzdHJhdG9yL0Rlc2t0b3AvdmlwX2lubGluZV9oNS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQiKTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwOwoKdmFyIF92dWV4ID0gcmVxdWlyZSgidnVleCIpOwoKdmFyIF9wYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkB1dGlscy9wYXkiKSk7CgovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwp2YXIgSW50ZXJ2YWw7CnZhciBfZGVmYXVsdCA9IHsKICBuYW1lOiAnb3JkZXJEZXRhaWwnLAogIG1peGluczogW10sCiAgY29tcHV0ZWQ6IHsgLi4uKDAsIF92dWV4Lm1hcEdldHRlcnMpKFsibG9jYXRpb25JbmZvIiwgImxvY2F0aW9uQ2l0eSJdKQogIH0sCiAgY29tcG9uZW50czoge30sCgogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0aWNrZXRJbmRleDogMCwKICAgICAgdGlja2V0TGlzdDogW3sKICAgICAgICB1cmw6ICcnCiAgICAgIH0sIHsKICAgICAgICB1cmw6ICcnCiAgICAgIH1dLAogICAgICB2aXBUeXBlOiBbJycsICfkvZPpqozljaEnLCAn5pyI5Y2hJywgJ+Wto+WNoScsICflubTljaEnXSwKICAgICAgcWlhbnpodUxpbms6IGZhbHNlLAogICAgICAvLyDmmK/lkKbmmK/ljYPnjKrot7PovazlhaXlj6MKICAgICAgb3JkZXJTaG93OiBmYWxzZSwKICAgICAgLy8g5LiL5Y2V5oiQ5Yqf5by556qXCiAgICAgIGluZm86IHsKICAgICAgICBhY3RJbmZvOiB7fQogICAgICB9LAogICAgICAvLyDorqLljZXor6bmg4UKICAgICAgb3JkZXJUeXBlOiAxLAogICAgICAvLyDorqLljZXnsbvlnosKICAgICAgdHJhZGVJZDogMCwKICAgICAgZ3JvdXBJbmZvOiB7fSwKICAgICAgZ3JvdXBJZDogMCwKICAgICAgdHJhY3ZlbFVzZXJMaXN0U2hvdzogZmFsc2UsCiAgICAgIHRyYWN2ZWxVc2VyTGlzdDogW10sCiAgICAgIHRyYWN2ZWxVc2VyTGlzdE5hbWU6ICcnLAogICAgICByZWNoYXJnZUxpc3Q6IFsn5omL5py65Y+3JywgJ1FR5Y+3JywgJ+WKoOayueWNoeWPtycsICfop4bpopHljaHlj7cnXSwKICAgICAgaXNBbGw6IGZhbHNlLAogICAgICBzaG93RXF1aXR5OiA1LAogICAgICBlcXVpdHlpbmZvOiB7fSwKICAgICAgcmVhZHk6IGZhbHNlCiAgICB9OwogIH0sCgogIG1ldGhvZHM6IHsgLi4uKDAsIF92dWV4Lm1hcE11dGF0aW9ucykoJ2luZGV4JywgWydTRVRfVVBEQVRFUEFHRSddKSwKCiAgICAvLyDngrnlh7vlrqLmnI0KICAgIGxpbmtTZXJ2aWNlKCkgewogICAgICB0aGlzLnNlcnZpY2VTaG93ID0gdHJ1ZTsKICAgIH0sCgogICAgLy8KICAgIHNlcnZpY2VDb3B5KHZhbCkgewogICAgICB0aGlzLiRUb2FzdCgn5bey5aSN5Yi25b6u5L+h77yM6K+35Zyo5b6u5L+h5Lit57KY6LS05pCc57SiJyk7CiAgICB9LAoKICAgIC8vIOiOt+WPluaLvOWbouiuouWNleS/oeaBrwogICAgZ2V0R3JvdXBJbmZvKCkgewogICAgICB0aGlzLiRhcGkuZ3JvdXBfb3JkZXJfaW5mbyh7CiAgICAgICAgZ3JvdXBJZDogdGhpcy5ncm91cElkCiAgICAgIH0pLnRoZW4ocmVzID0+IHsKICAgICAgICBpZiAocmVzLnN0YXRlKSB7CiAgICAgICAgICB0aGlzLmdyb3VwSW5mbyA9IHsgLi4ucmVzLmluZm8sCiAgICAgICAgICAgIGFjdFR5cGU6ICdBQ1RfQVNTRU1CTEUnCiAgICAgICAgICB9OwoKICAgICAgICAgIGlmIChyZXMuaW5mby5ncm91cFN0YXRlICE9IDMpIHsKICAgICAgICAgICAgdGhpcy5jb3VudERvd24oMSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCgogICAgLy8g5ou85Zui5p+l55yL5Y2h5Yi4CiAgICBsb29rQ291cG9uKCkgey8vIHd4Lm5hdmlnYXRlVG8oewogICAgICAvLyAgIHVybDonL3BhZ2VzL2NlbnRlci9jYXJkL2NhcmQnCiAgICAgIC8vIH0pCiAgICB9LAoKICAgIGxvb2tJZENhcmQoaW5kZXgpIHsKICAgICAgbGV0IGl0ZW0gPSB0aGlzLnRyYWN2ZWxVc2VyTGlzdFtpbmRleF07CiAgICAgIGl0ZW0uc2hvdyA9ICF0aGlzLnRyYWN2ZWxVc2VyTGlzdFtpbmRleF0uc2hvdzsgLy8gY29uc29sZS5sb2codGhpcy50cmFjdmVsVXNlckxpc3RbaW5kZXhdLCAnLS0tLS0tLS0tLS0xJykKCiAgICAgIHRoaXMuJHNldCh0aGlzLnRyYWN2ZWxVc2VyTGlzdCwgaW5kZXgsIGl0ZW0pOwogICAgfSwKCiAgICB0cmFjdmVsTmFtZUNoYW5nZSgpIHsKICAgICAgdGhpcy50cmFjdmVsVXNlckxpc3RTaG93ID0gIXRoaXMudHJhY3ZlbFVzZXJMaXN0U2hvdzsKICAgIH0sCgogICAgLy8g5YyF5ZCr5p2D55uK5p+l55yL5YWo6YOoCiAgICBoYW5kbGVMb29rQm90aCgpIHsKICAgICAgdGhpcy5pc0FsbCA9ICF0aGlzLmlzQWxsOwogICAgICB0aGlzLnNob3dFcXVpdHkgPSB0aGlzLnNob3dFcXVpdHkgPT0gNSA/IHRoaXMuZXF1aXR5aW5mby5lcXVpdHlMaXN0Lmxlbmd0aCA6IDU7CiAgICB9LAoKICAgIC8vIOiOt+WPluadg+ebiuWIl+ihqAogICAgZXF1aXR5X2xpc3QoKSB7CiAgICAgIHRoaXMuJGFwaS5jb250YWluX2VxdWl0eV9saXN0KHsKICAgICAgICB0cmFkZUlkOiB0aGlzLnRyYWRlSWQKICAgICAgfSkudGhlbihyZXMgPT4gewogICAgICAgIHRoaXMuZXF1aXR5aW5mbyA9IHJlcy5pbmZvOwogICAgICB9KTsKICAgIH0sCgogICAgLy8g6Lez6L2s6Lev5b6ECiAgICBoYW5kbGVOYXZUbyhpdGVtKSB7CiAgICAgIGNvbnNvbGUubG9nKGl0ZW0pOwoKICAgICAgaWYgKGl0ZW0udHlwZSA9PSAyKSB7CiAgICAgICAgLy8KICAgICAgICBpZiAoaXRlbS5qdW1wVHlwZSA9PSAyKSB7CiAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgICAgIG5hbWU6ICdjb3Vwb25MaXN0JwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIGlmIChpdGVtLmp1bXBUeXBlID09IDEpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKGl0ZW0sIDc4Nyk7IC8vIOi3s+i9rOiHs+WNoeWIuOivpuaDhemhtQoKICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICAgICAgbmFtZTogJ2NvdXBvbkRldGFpbCcsCiAgICAgICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICAgICAgY2FyZFN0YXJ0VGltZTogaXRlbS5jYXJkU3RhcnRUaW1lLAogICAgICAgICAgICAgIGNhcmRFbmRUaW1lOiBpdGVtLmNhcmRFbmRUaW1lLAogICAgICAgICAgICAgIGNhcmRJZDogaXRlbS5jYXJkSWQsCiAgICAgICAgICAgICAgZGV0YWlsSWQ6IGl0ZW0uZGV0YWlsSWQsCiAgICAgICAgICAgICAgdHlwZTogMQogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09IDEpIHsKICAgICAgICAvLyDot7PovazlhYXlgLzkvJrlkZjpobUKICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgICBuYW1lOiAnam9pblZpcCcKICAgICAgICB9KTsKICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT0gNCkgewogICAgICAgIC8vIOi3s+i9rOe6ouWMheivpuaDhemhtQogICAgICAgIGlmIChpdGVtLmp1bXBUeXBlICE9IDEpIHJldHVybiBmYWxzZTsKICAgICAgICBsZXQgY2l0eUlkID0gdGhpcy5sb2NhdGlvbkNpdHkuY2l0eUlkOwoKICAgICAgICBpZiAoY2l0eUlkICE9IGl0ZW0uY2l0eUlkICYmIGl0ZW0uY2l0eUlkICE9IDApIHsKICAgICAgICAgIHRoaXMuJGRpYWxvZy5hbGVydCh7CiAgICAgICAgICAgIHRpdGxlOiAn5o+Q56S6JywKICAgICAgICAgICAgbWVzc2FnZTogYOivpee6ouWMheS7hemZkCR7aXRlbS5jaXR5TmFtZX3kvb/nlKjvvIzlpoLpnIDkvb/nlKjor7fliLDpppbpobXliIfmjaLln47luIJgLAogICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+aIkeefpemBk+S6hicKICAgICAgICAgIH0pLnRoZW4oKCkgPT4gey8vIG9uIGNsb3NlCiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmIChpdGVtLmRldGFpbFR5cGUgPT0gJ1ZPVUNIRVJfQ0FURUdPUlknIHx8IGl0ZW0uZGV0YWlsVHlwZSA9PSAnVk9VQ0hFUl9BQ1RJVklUWScpIHsKICAgICAgICAgIC8vIOWTgeexu+e6ouWMheOAgea0u+WKqOe6ouWMhQogICAgICAgICAgLy8g6Lez6L2s5Y+v5L2/55So5rS75YqoCiAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgICAgIG5hbWU6ICdhcHBseUFjdGl2ZScsCiAgICAgICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICAgICAgdm91Y2hlcklkOiBpdGVtLmNhcmRJZAogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uZGV0YWlsVHlwZSA9PSAnVk9VQ0hFUl9TSE9QJykgey8vIOWVhuWutue6ouWMhQogICAgICAgICAgLy8g6Lez6L2s5Y+v55So5ZWG5a62CiAgICAgICAgICAvLyB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgICAvLyAgIG5hbWU6ICdhcHBseVNob3AnLAogICAgICAgICAgLy8gICBxdWVyeTogewogICAgICAgICAgLy8gICAgIHZvdWNoZXJJZDogaXRlbS5jYXJkSWQKICAgICAgICAgIC8vICAgfQogICAgICAgICAgLy8gfSkKICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uZGV0YWlsVHlwZSA9PSAnVk9VQ0hFUl9NRU1CRVInKSB7CiAgICAgICAgICAvLyDkvJrlkZjljaHnuqLljIUKICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICAgICAgbmFtZTogJ2pvaW5WaXAnCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09IDUpIHsKICAgICAgICBpZiAoaXRlbS5qdW1wVHlwZSA9PSAxKSB7Ly8g6Lez6L2s5raI6LS55Yi46K+m5oOF6aG1CiAgICAgICAgICAvLyB3eC5uYXZpZ2F0ZVRvKHsKICAgICAgICAgIC8vICAgdXJsOiBgL3BhZ2VzL2NlbnRlci9jb25zdW1lcl9jb3Vwb24vYXBwbHlfYWN0L2FwcGx5X2FjdD9jb3Vwb25JZD0ke2l0ZW0uY2FyZElkfSZsbmc9JHt0aGlzLmxvY2F0aW9uSW5mby5sb25naXR1ZGV9JmxhdD0ke3RoaXMubG9jYXRpb25JbmZvLmxhdGl0dWRlfSZjb3Vwb25Nb25leT0ke2l0ZW0ubW9uZXl9YCwKICAgICAgICAgIC8vIH0pCiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIC8vIOiOt+WPluiuouWNleivpuaDhQogICAgZGV0YWlsKGZsYWcpIHsKICAgICAgdGhpcy5jYW5DbGljayA9IHRydWU7CiAgICAgIHRoaXMucmVhZHkgPSBmYWxzZTsgLy8g5ou85ZuiCgogICAgICBpZiAodGhpcy5ncm91cElkKSB7CiAgICAgICAgdGhpcy5nZXRHcm91cEluZm8oKTsKICAgICAgfQoKICAgICAgbGV0IHR5cGVPYmogPSB7CiAgICAgICAgMTogJ2NhcmRPcmRlckRldGFpbCcsCiAgICAgICAgMzogJ3ZpcF9vcmRlcl9kZXRhaWwnCiAgICAgIH07CiAgICAgIGxldCBhcGlOYW1lID0gdHlwZU9ialt0aGlzLm9yZGVyVHlwZV07IC8vIOWNoeWIuOiuouWNleivpuaDhQoKICAgICAgdGhpcy4kYXBpW2FwaU5hbWVdKHsKICAgICAgICBsYXQ6IHRoaXMubG9jYXRpb25JbmZvLmxhdGl0dWRlLAogICAgICAgIGxuZzogdGhpcy5sb2NhdGlvbkluZm8ubG9uZ2l0dWRlLAogICAgICAgIHRyYWRlSWQ6IHRoaXMudHJhZGVJZAogICAgICB9KS50aGVuKHJlcyA9PiB7CiAgICAgICAgaWYgKHJlcy5zdGF0ZSkgewogICAgICAgICAgaWYgKHRoaXMub3JkZXJUeXBlID09IDEpIHsKICAgICAgICAgICAgdGhpcy5lcXVpdHlfbGlzdCgpOwoKICAgICAgICAgICAgaWYgKHJlcy5pbmZvLm9yZGVySW5mby5wYXlzdGF0ZSA9PSAxKSB7CiAgICAgICAgICAgICAgdGhpcy5jb3VudERvd24oKTsgLy8g5byA5ZCv5YCS6K6h5pe2CiAgICAgICAgICAgIH0gLy8gY29uc29sZS5sb2codGhpcy5pbmZvLCAnLS0tLS0tLS0tLS0tLS1pbmZvJykKCgogICAgICAgICAgICBpZiAocmVzLmluZm8udHJhY3ZlbFVzZXJMaXN0ICYmIHJlcy5pbmZvLnRyYWN2ZWxVc2VyTGlzdC5sZW5ndGgpIHsKICAgICAgICAgICAgICAvLyDnlKjmiLfkv6Hmga/lpITnkIYKICAgICAgICAgICAgICBsZXQgdHJhY3ZlbFVzZXJMaXN0ID0gcmVzLmluZm8udHJhY3ZlbFVzZXJMaXN0OwogICAgICAgICAgICAgIHRyYWN2ZWxVc2VyTGlzdC5mb3JFYWNoKGl0ZW0gPT4gewogICAgICAgICAgICAgICAgaWYgKGl0ZW0uaWRDYXJkKSB7CiAgICAgICAgICAgICAgICAgIGl0ZW0uaWRDYXJkRmFsc2UgPSBpdGVtLmlkQ2FyZC5yZXBsYWNlKGl0ZW0uaWRDYXJkLnNsaWNlKDYsIDE2KSwgIioqKioqKioqKioiKTsKICAgICAgICAgICAgICAgICAgaXRlbS5zaG93ID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGlmICh0cmFjdmVsVXNlckxpc3QubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgbGV0IHRyYWN2ZWxVc2VyTGlzdE5hbWUgPSB0cmFjdmVsVXNlckxpc3QubWFwKGl0ZW0gPT4gewogICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS51c2VyTmFtZTsKICAgICAgICAgICAgICAgIH0pLmpvaW4oIjsiKTsKICAgICAgICAgICAgICAgIHRoaXMudHJhY3ZlbFVzZXJMaXN0U2hvdyA9IHRydWU7CiAgICAgICAgICAgICAgICB0aGlzLnRyYWN2ZWxVc2VyTGlzdE5hbWUgPSB0cmFjdmVsVXNlckxpc3ROYW1lOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGhpcy50cmFjdmVsVXNlckxpc3QgPSB0cmFjdmVsVXNlckxpc3Q7CiAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy50cmFjdmVsVXNlckxpc3QsICd0cmFjdmVsVXNlckxpc3QnKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5pbmZvID0gcmVzLmluZm87IC8vIOaLvOWbouWIhuS6qwoKICAgICAgICAgICAgaWYgKHJlcy5pbmZvLmFjdEluZm8uYWN0VHlwZSA9PSAnQUNUX0FTU0VNQkxFJykgewogICAgICAgICAgICAgIHRoaXMuYWN0U24gPSB0aGlzLmluZm8uYWN0SW5mby5hY3RTbjsKICAgICAgICAgICAgICB0aGlzLmVudW1LZXkgPSAnQUNUX0FTU0VNQkxFJzsKICAgICAgICAgICAgICB0aGlzLnNob3dTaGFyZSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIOe7hOijheW8gOmAmuS8muWRmOWNoeS/oeaBrwogICAgICAgICAgICB0aGlzLmluZm8gPSB7IC4uLnJlcy5pbmZvLAogICAgICAgICAgICAgIG9yZGVySW5mbzogcmVzLmluZm8sCiAgICAgICAgICAgICAgcmVmdW5kSW5mbzogcmVzLmluZm8sCiAgICAgICAgICAgICAgdmlwT3JkZXI6IHJlcy5pbmZvLm9yZGVySW5mbywKICAgICAgICAgICAgICBhY3RJbmZvOiB7CiAgICAgICAgICAgICAgICBhY3RUeXBlOiAnJwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLnJlYWR5ID0gdHJ1ZTsKICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuaW5mbywgdGhpcy5vcmRlclR5cGUsICctLS0tLS0tLS0tLS0tLS0tLS1pbmZvJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuJFRvYXN0KHJlcy5tZXNzYWdlKTsKICAgICAgICB9CiAgICAgIH0pLmZpbmFsbHkoKCkgPT4ge30pOwogICAgfSwKCiAgICAvLyDnlLPor7fpgIDmrL4KICAgIGFwcGx5KCkgewogICAgICB0aGlzLiRzYXZlLnNldCgnc2Vzc2lvbicsICdyZWZ1bmQnLCB0aGlzLmluZm8pOwogICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgbmFtZTogJ3JlZnVuZCcsCiAgICAgICAgcXVlcnk6IHsKICAgICAgICAgIHRyYWRlSWQ6IHRoaXMudHJhZGVJZAogICAgICAgIH0KICAgICAgfSk7IC8vIHd4Lm5hdmlnYXRlVG8oewogICAgICAvLyAgIHVybDogYC9wYWdlcy9jZW50ZXIvcmVmdW5kL3JlZnVuZD90cmFkZUlkPSR7dGhpcy50cmFkZUlkfWAKICAgICAgLy8gfSkKICAgIH0sCgogICAgLy8g5ou85Zui5Y+W5raI6K6i5Y2VCiAgICBjYW5jZWxHcm91cCgpIHsKICAgICAgdGhpcy4kZGlhbG9nLmNvbmZpcm0oewogICAgICAgIHRpdGxlOiAn5o+Q56S6JywKICAgICAgICBtZXNzYWdlOiAn5piv5ZCm56Gu5a6a5Y+W5raI6K+l6K6i5Y2V77yfJywKICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+aYrycsCiAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAnIzFBMTkxOScsCiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WQpicsCiAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICcjQjU2QzAwJwogICAgICB9KS50aGVuKCgpID0+IHsKICAgICAgICB0aGlzLiRhcGkuZ3JvdXBfY2FuY2VsKHsKICAgICAgICAgIHRyYWRlSWQ6IHRoaXMudHJhZGVJZCwKICAgICAgICAgIGdyb3VwSWQ6IHRoaXMuZ3JvdXBJZAogICAgICAgIH0pLnRoZW4ocmVzMSA9PiB7CiAgICAgICAgICBpZiAocmVzMS5zdGF0ZSkgewogICAgICAgICAgICB0aGlzLmRldGFpbCh0cnVlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuJFRvYXN0KHJlczEubWVzc2FnZSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pLmNhdGNoKCgpID0+IHsvLyBvbiBjYW5jZWwKICAgICAgfSk7CiAgICB9LAoKICAgIC8vIOWPlua2iOiuouWNlQogICAgY2FuY2VsT3JkZXIoKSB7CiAgICAgIHRoaXMuJGRpYWxvZy5jb25maXJtKHsKICAgICAgICB0aXRsZTogJ+aPkOekuicsCiAgICAgICAgbWVzc2FnZTogJ+aYr+WQpuehruiupOWPlua2iOatpOiuouWNlScsCiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfmmK8nLAogICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyMxQTE5MTknLAogICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflkKYnLAogICAgICAgIGNhbmNlbEJ1dHRvbkNvbG9yOiAnI0I1NkMwMCcKICAgICAgfSkudGhlbigoKSA9PiB7CiAgICAgICAgdGhpcy4kYXBpLmNhcmRPcmRlckNhbmNsZSh7CiAgICAgICAgICB0cmFkZUlkOiB0aGlzLnRyYWRlSWQKICAgICAgICB9KS50aGVuKHJlcyA9PiB7CiAgICAgICAgICBpZiAocmVzLnN0YXRlKSB7CiAgICAgICAgICAgIHRoaXMuJFRvYXN0KCLlj5bmtojmiJDlip8iKTsKICAgICAgICAgICAgdGhpcy4kcm91dGVyLmdvKC0xKTsKICAgICAgICAgICAgdGhpcy5TRVRfVVBEQVRFUEFHRSh7CiAgICAgICAgICAgICAgJ29yZGVyTGlzdCc6IHRydWUKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLiRkaWFsb2cuYWxlcnQoewogICAgICAgICAgICAgIHRpdGxlOiAn5qCH6aKYJywKICAgICAgICAgICAgICBtZXNzYWdlOiAn5Y+W5raI5aSx6LSl77yM6K+356iN5ZCO6YeN6K+VJywKICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+aIkeefpemBk+S6hicKICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7Ly8gb24gY2xvc2UKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pLmNhdGNoKCgpID0+IHsvLyBvbiBjYW5jZWwKICAgICAgfSk7CiAgICB9LAoKICAgIC8vIOW+heS7mOasvuWAkuiuoeaXtgogICAgY291bnREb3duKHR5cGUpIHsKICAgICAgaWYgKEludGVydmFsKSB7CiAgICAgICAgY2xlYXJJbnRlcnZhbChJbnRlcnZhbCk7CiAgICAgIH0KCiAgICAgIGlmICh0eXBlID09IDEpIHsvLyDmi7zlm6LlgJLorqHml7YKICAgICAgICAvLyBJbnRlcnZhbCA9IHNldEludGVydmFsKCgpPT57ICAgICAKICAgICAgICAvLyAgIGxldCBncm91cEluZm8gPSB0aGlzLmdyb3VwSW5mbwogICAgICAgIC8vICAgaWYoZ3JvdXBJbmZvLmdyb3VwU3RhdGUgPT0gMSkgewogICAgICAgIC8vICAgICBpZiAoZ3JvdXBJbmZvLnJlbWFpblRpbWUgPD0gMCl7IC8vIOWAkuiuoeaXtue7k+adn+WIoOmZpOW+heS7mOasvgogICAgICAgIC8vICAgICAgIGNsZWFySW50ZXJ2YWwoSW50ZXJ2YWwpCiAgICAgICAgLy8gICAgICAgdGhpcy5nZXRHcm91cEluZm8oKQogICAgICAgIC8vICAgICB9CiAgICAgICAgLy8gICAgIGdyb3VwSW5mby5yZW1haW5UaW1lIC09IDEwMAogICAgICAgIC8vICAgICBncm91cEluZm8uZG93blRpbWUgPSBjb3VudERvd24zKGdyb3VwSW5mby5yZW1haW5UaW1lLCB0cnVlKQogICAgICAgIC8vICAgICB0aGlzLmdyb3VwSW5mbyA9IGdyb3VwSW5mbwogICAgICAgIC8vICAgfQogICAgICAgIC8vIH0sIDEwMCkKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyDorqLljZXku6Pku5jmrL7lgJLorqHml7YKICAgICAgICBJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICAgIGxldCByZW1haW5UaW1lID0gdGhpcy5pbmZvLm9yZGVySW5mby5yZW1haW5UaW1lOwoKICAgICAgICAgIGlmIChyZW1haW5UaW1lIDw9IDApIHsKICAgICAgICAgICAgLy8g5YCS6K6h5pe257uT5p2fCiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoSW50ZXJ2YWwpOwogICAgICAgICAgfQoKICAgICAgICAgIHJlbWFpblRpbWUgLT0gMTAwMDsKICAgICAgICAgIHRoaXMuJHNldCh0aGlzLmluZm8ub3JkZXJJbmZvLCAncmVtYWluVGltZScsIHJlbWFpblRpbWUpOwogICAgICAgIH0sIDEwMDApOwogICAgICB9CiAgICB9LAoKICAgIC8vIOaUr+S7mAogICAgcGF5KCkgewogICAgICBsZXQgaW5mbyA9IHRoaXMuaW5mbzsKCiAgICAgIGlmIChpbmZvLm9yZGVySW5mby5yZW1haW5UaW1lICYmIGluZm8ub3JkZXJJbmZvLnJlbWFpblRpbWUgPD0gMCkgewogICAgICAgIHRoaXMuJFRvYXN0KCforqLljZXlt7Lov4fmnJ8nKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGxldCB0aGF0ID0gdGhpczsKCiAgICAgIGxldCBhY3RQYXkgPSBfcGF5LmRlZmF1bHQuYWN0UGF5KHRoaXMudHJhZGVJZCk7CgogICAgICBpZiAoYWN0UGF5KSB7CiAgICAgICAgYWN0UGF5LnRoZW4ocmVzID0+IHsKICAgICAgICAgIHRoaXMub3JkZXJRdWVyeSgpOwogICAgICAgIH0pLmNhdGNoKHJlcyA9PiB7CiAgICAgICAgICBpZiAocmVzLmNhbmNlbFBheSkgewogICAgICAgICAgICAvLyDmlK/ku5jlpLHotKUKICAgICAgICAgICAgdGhpcy4kVG9hc3QoJ+WPlua2iOaUr+S7mCcpOwogICAgICAgICAgfSBlbHNlIGlmIChyZXMuY29kZSA9PSAiNTA4IiB8fCByZXMuY29kZSA9PSAiNTA5IiB8fCByZXMuY29kZSA9PSAiMTQxMiIpIHsKICAgICAgICAgICAgdGhpcy4kZGlhbG9nLmFsZXJ0KHsKICAgICAgICAgICAgICB0aXRsZTogJ+aPkOekuicsCiAgICAgICAgICAgICAgbWVzc2FnZTogcmVzLm1lc3NhZ2UKICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7CiAgICAgICAgICAgICAgLy8gb24gY2xvc2UKICAgICAgICAgICAgICB0aGlzLiRyb3V0ZXIuZ28oLTEpOwogICAgICAgICAgICAgIHRoaXMuU0VUX1VQREFURVBBR0UoewogICAgICAgICAgICAgICAgJ29yZGVyTGlzdCc6IHRydWUKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlcy5jb2RlID09IDE1MjApIHsKICAgICAgICAgICAgLy8g5LiL5Y2V5Lu35qC85LiO56ys5LiJ5pa55Lu35qC85LiN5LiA6Ie0CiAgICAgICAgICAgIHRoaXMuJGRpYWxvZy5hbGVydCh7CiAgICAgICAgICAgICAgdGl0bGU6ICfmj5DnpLonLAogICAgICAgICAgICAgIG1lc3NhZ2U6ICforqLljZXkv6Hmga/lt7LosIPmlbTvvIzor7fph43mlrDkuIvljZUnCiAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4gewogICAgICAgICAgICAgIC8vIG9uIGNsb3NlCiAgICAgICAgICAgICAgdGhpcy4kcm91dGVyLmdvKC0xKTsKICAgICAgICAgICAgICB0aGlzLlNFVF9VUERBVEVQQUdFKHsKICAgICAgICAgICAgICAgICdvcmRlckxpc3QnOiB0cnVlCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9LAoKICAgIC8vIOagoemqjOiuouWNlQogICAgb3JkZXJRdWVyeSgpIHsKICAgICAgbGV0IHRoYXQgPSB0aGlzOwoKICAgICAgbGV0IG9yZGVyUXVlcnkgPSBfcGF5LmRlZmF1bHQub3JkZXJRdWVyeSh0aGlzLnRyYWRlSWQpOwoKICAgICAgaWYgKG9yZGVyUXVlcnkpIHsKICAgICAgICBvcmRlclF1ZXJ5LnRoZW4ocmVzID0+IHsKICAgICAgICAgIGlmIChyZXMuc3RhdGUpIHsKICAgICAgICAgICAgLy8g5pSv5LuY5oiQ5YqfCiAgICAgICAgICAgIHRoYXQuZGV0YWlsKHRydWUpOyAvLyDph43mlrDliqDovb3pobXpnaIKCiAgICAgICAgICAgIHRoaXMuaGFzVXBkYXRlQ2VudGVyID0gdHJ1ZTsgLy8g5Yi35pawY2VudGVy6aG16Z2iCgogICAgICAgICAgICBsZXQgcGFnZSA9IGdldEN1cnJlbnRQYWdlcygpOwogICAgICAgICAgICBwYWdlID0gcGFnZVtwYWdlLmxlbmd0aCAtIDJdOyAvLyDojrflj5bkuIrkuIDpobXpnaIKCiAgICAgICAgICAgIHBhZ2Uuc2V0RGF0YSh7CiAgICAgICAgICAgICAgcmVmcmVzaDogdHJ1ZQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSwKCiAgICAvLyDmn6XnnIvljaHliLgKICAgIGdvQ2FyZCgpIHsKICAgICAgbGV0IGluZm8gPSB0aGlzLmluZm87CgogICAgICBpZiAoaW5mby5hY3RJbmZvLmFjdFR5cGUgPT0gJ0FDVF9DQVNIX1ZPVUNIRVInKSB7Ly8g57qi5YyF5rS75Yqo6Lez6L2s57qi5YyF5YiX6KGoCiAgICAgICAgLy8gd3gubmF2aWdhdGVUbyh7CiAgICAgICAgLy8gICB1cmw6ICcvcGFnZXMvY2VudGVyL2Nhc2hfcmVkX2xpc3QvY2FzaF9yZWRfbGlzdCcKICAgICAgICAvLyB9KQogICAgICB9IGVsc2UgaWYgKGluZm8uYWN0SW5mby5hY3RUeXBlID09ICdBQ1RfR0lGVF9QQUNLQUdFJykgewogICAgICAgIC8vIOekvOWMhei3s+i9rOWNoeWIuOWIl+ihqAogICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICAgIG5hbWU6ICdjb3Vwb25MaXN0JwogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKGluZm8udHJhY3ZlbFVzZXIpIHsKICAgICAgICAvLyDoh6rmiJHmuLjljaHliLjor6bmg4UKICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgICBuYW1lOiAndHJhdmVsQ2FyZERldGFpbHMnLAogICAgICAgICAgcXVlcnk6IHsKICAgICAgICAgICAgdHJhZGVJZDogaW5mby5vcmRlckluZm8udHJhZGVJZAogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIOeJueWNlui3s+i9rOWNoeWIuOivpuaDhQogICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICAgIG5hbWU6ICdjb3Vwb25EZXRhaWwnLAogICAgICAgICAgcXVlcnk6IHsKICAgICAgICAgICAgdHJhZGVJZDogaW5mby5vcmRlckluZm8udHJhZGVJZAogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9LAoKICAgIC8vIOi3s+i9rOivpuaDhQogICAgZ29EZXRhaWwoKSB7CiAgICAgIGxldCBpbmZvID0gdGhpcy5pbmZvOwogICAgICBpZiAoaW5mby5vcmRlckluZm8uY2hhbm5lbFR5cGUgPT0gJ0NIQU5ORUxfQ09OU1VNRVJfQ09VUE9OJyB8fCBpbmZvLm9yZGVySW5mby5jaGFubmVsVHlwZSA9PSAnQ0hBTk5FTF9GT1JUVU5FX0NPVVBPTicpIHJldHVybjsKCiAgICAgIGlmIChpbmZvLmFjdEluZm8uYWN0VHlwZSA9PSAnQUNUX0dJRlRfUEFDS0FHRScpIHsKICAgICAgICAvLyDnpLzljIXor6bmg4UKICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgICBuYW1lOiAnZ2lmdEJhZycsCiAgICAgICAgICBxdWVyeTogewogICAgICAgICAgICBhY3RTbjogaW5mby5hY3RJbmZvLmFjdFNuLAogICAgICAgICAgICBjaGFubmVsVHlwZTogJ0NIQU5ORUxfT1JERVJfREVUQUlMX1BBR0UnCiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAoaW5mby5hY3RJbmZvLmFjdFR5cGUgPT0gJ0FDVF9TUEVDSUFMX09GRkVSJykgewogICAgICAgIC8vIOeJueWNluivpuaDhQogICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICAgIG5hbWU6ICdzcGVjaWFsU2FsZScsCiAgICAgICAgICBxdWVyeTogewogICAgICAgICAgICBhY3RTbjogaW5mby5hY3RJbmZvLmFjdFNuLAogICAgICAgICAgICBjaGFubmVsVHlwZTogJ0NIQU5ORUxfT1JERVJfREVUQUlMX1BBR0UnCiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gLy8gIGVsc2UgaWYgKGluZm8uYWN0SW5mby5hY3RUeXBlID09ICdBQ1RfRElSRUNUX1JFQ0hBUkdFJykgewogICAgICAvLyAgIHd4Lm5hdmlnYXRlVG8oewogICAgICAvLyAgICAgdXJsOiBgL3BhZ2VzL2FjdGl2aXR5L3JlY2hhcmdlX2RldGFpbC9yZWNoYXJnZV9kZXRhaWw/YWN0U249JHtpbmZvLmFjdEluZm8uYWN0U259JmNoYW5uZWxUeXBlPUNIQU5ORUxfT1JERVJfREVUQUlMX1BBR0VgCiAgICAgIC8vICAgfSkKICAgICAgLy8gfSBlbHNlIGlmKGluZm8uYWN0SW5mby5hY3RUeXBlID09J0FDVF9BU1NFTUJMRScpIHsKICAgICAgLy8gICB3eC5uYXZpZ2F0ZVRvKHsKICAgICAgLy8gICAgIHVybDogYC9zdWJQYWNrX21hcmtldC9wYWdlcy9zcGVsbF9ncm91cC9zcGVsbF9ncm91cD9jaGFubmVsVHlwZT1DSEFOTkVMX09SREVSX0RFVEFJTF9QQUdFJmFjdFNuPSR7aW5mby5hY3RJbmZvLmFjdFNufSZncm91cElkPTAmcXJDb2RlPWAKICAgICAgLy8gICB9KSAgIAogICAgICAvLyB9IGVsc2UgaWYoaW5mby5hY3RJbmZvLmFjdFR5cGUgPT0gJ0FDVF9DQVNIX1ZPVUNIRVInKSB7CiAgICAgIC8vICAgd3gubmF2aWdhdGVUbyh7CiAgICAgIC8vICAgICB1cmw6IGAvcGFnZXMvYWN0aXZpdHkvYWN0X3JlZF9wYWNrZXQvYWN0X3JlZF9wYWNrZXQ/YWN0U249JHtpbmZvLmFjdEluZm8uYWN0U259JnFyQ29kZT0mY2hhbm5lbFR5cGU9Q0hBTk5FTF9PUkRFUl9ERVRBSUxfUEFHRWAsCiAgICAgIC8vICAgfSkKICAgICAgLy8gfSBlbHNlIGlmIChpbmZvLmFjdEluZm8uYWN0VHlwZSA9PSAnQUNUX1NIQVJFX0ZJU1NJT04nKSB7CiAgICAgIC8vICAgd3gubmF2aWdhdGVUbyh7CiAgICAgIC8vICAgICB1cmw6IGAvc3ViUGFja19tYXJrZXQvcGFnZXMvc2hhcmVfZmlzc2lvbi9zaGFyZV9maXNzaW9uP2FjdFNuPSR7aW5mby5hY3RJbmZvLmFjdFNufSZjaGFubmVsVHlwZT1DSEFOTkVMX09SREVSX0RFVEFJTF9QQUdFJnFyQ29kZT1gLAogICAgICAvLyAgIH0pCiAgICAgIC8vIH0KCiAgICB9LAoKICAgIGdvU3VjY2VzcygpIHsKICAgICAgLy8g5rWL6K+V5YWl5Y+jCiAgICAgIGxldCBpbmZvID0gdGhpcy5pbmZvOwoKICAgICAgaWYgKGluZm8uYWN0SW5mby5hY3RUeXBlID09ICdBQ1RfQ0FTSF9WT1VDSEVSJykgey8vIOe6ouWMhea0u+WKqOi3s+i9rOe6ouWMheWIl+ihqAogICAgICAgIC8vIHd4Lm5hdmlnYXRlVG8oewogICAgICAgIC8vICAgdXJsOiBgL3BhZ2VzL2FjdGl2aXR5L2FjdF9yZWRfcGFja2V0L3N1Y2Nlc3Mvc3VjY2Vzcz90cmFkZUlkPSR7aW5mby5vcmRlckluZm8udHJhZGVJZH0mdmlwX2NoZWNrPTBgCiAgICAgICAgLy8gfSkKICAgICAgfSBlbHNlIGlmIChpbmZvLmFjdEluZm8uYWN0VHlwZSA9PSAnQUNUX0dJRlRfUEFDS0FHRScpIHsKICAgICAgICAvLyDnpLzljIXor6bmg4UKICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgICBuYW1lOiAnZ2lmdEJhZ1N1Y2Nlc3MnLAogICAgICAgICAgcXVlcnk6IHsKICAgICAgICAgICAgdHJhZGVJZDogaW5mby5vcmRlckluZm8udHJhZGVJZCwKICAgICAgICAgICAgdmlwX2NoZWNrOiAwCiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAoaW5mby5hY3RJbmZvLmFjdFR5cGUgPT0gJ0FDVF9TUEVDSUFMX09GRkVSJykgewogICAgICAgIC8vIOeJueWNluivpuaDhQogICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICAgIG5hbWU6ICdzcGVjaWFsU2FsZVN1Y2Nlc3MnLAogICAgICAgICAgcXVlcnk6IHsKICAgICAgICAgICAgdHJhZGVJZDogaW5mby5vcmRlckluZm8udHJhZGVJZCwKICAgICAgICAgICAgdmlwX2NoZWNrOiAwCiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KCiAgfSwKCiAgY3JlYXRlZCgpIHsKICAgIGxldCBvcHRpb25zID0gdGhpcy4kcm91dGUucXVlcnk7CiAgICBjb25zb2xlLmxvZyhvcHRpb25zLCAnb3B0aW9ucycpOwogICAgdGhpcy5vcmRlclR5cGUgPSBvcHRpb25zLnR5cGUgPyBOdW1iZXIob3B0aW9ucy50eXBlKSA6IDE7CiAgICB0aGlzLnFyQ29kZSA9IHRoaXMucXJDb2RlOwogICAgdGhpcy50cmFkZUlkID0gb3B0aW9ucy5pZCB8fCAnJzsKICAgIHRoaXMuZ3JvdXBJZCA9IG9wdGlvbnMuZ3JvdXBJZCB8fCAnJzsKICAgIHRoaXMuc2hvcE5hbWUgPSBvcHRpb25zLnNob3BOYW1lIHx8ICcnOwogICAgdGhpcy5jaGFubmVsVHlwZSA9IG9wdGlvbnMuY2hhbm5lbFR5cGUgfHwgJyc7CiAgICB0aGlzLnFpYW56aHVMaW5rID0gISFvcHRpb25zLnBheTsKICAgIHRoaXMuZGV0YWlsKCk7CiAgfSwKCiAgZGVzdHJveWVkKCkgewogICAgY2xlYXJJbnRlcnZhbChJbnRlcnZhbCk7CiAgfQoKfTsKZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7"},null]}