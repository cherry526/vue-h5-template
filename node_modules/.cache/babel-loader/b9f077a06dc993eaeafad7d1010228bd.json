{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\src\\components\\center\\cardCodeDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\src\\components\\center\\cardCodeDetail.vue","mtime":1597889072385},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vip_inline_h5\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvciI7CmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAiQzovVXNlcnMvQWRtaW5pc3RyYXRvci9EZXNrdG9wL3ZpcF9pbmxpbmVfaDUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiQzovVXNlcnMvQWRtaW5pc3RyYXRvci9EZXNrdG9wL3ZpcF9pbmxpbmVfaDUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICJDOi9Vc2Vycy9BZG1pbmlzdHJhdG9yL0Rlc2t0b3AvdmlwX2lubGluZV9oNS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IGRyYXdRcmNvZGUgZnJvbSAnQC9wbHVnaW5zL3d4cXJjb2RlJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICcnLAogIHByb3BzOiB7CiAgICBvcHRpb25zOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7fQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoe30sIG1hcEdldHRlcnMoWyJsb2NhdGlvbkluZm8iXSkpLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzd2lwZXJIZWlnaHQ6IDAsCiAgICAgIHRvdGFsU2l6ZTogMCwKICAgICAgc3dpcGVySW5kZXg6IDAsCiAgICAgIGNhcmRMaXN0OiBbXSwKICAgICAgbWFzazogZmFsc2UsCiAgICAgIHNob3dDYXJkQ29kZTogZmFsc2UsCiAgICAgIGluZm86IHt9LAogICAgICBpbml0aWFsU3dpcGU6IDAKICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBjaGFuZ2U6IGZ1bmN0aW9uIGNoYW5nZShjdXJyZW50KSB7CiAgICAgIHRoaXMuc3dpcGVySW5kZXggPSBjdXJyZW50OwogICAgICB0aGlzLnNldFBhZ2UoY3VycmVudCk7CiAgICB9LAogICAgLy8g5YiH5o2i5LqM57u056CBCiAgICBzd2l0Y2hzOiBmdW5jdGlvbiBzd2l0Y2hzKGluZGV4KSB7CiAgICAgIHZhciBzd2lwZXJJbmRleCA9IHRoaXMuc3dpcGVySW5kZXg7CiAgICAgIHN3aXBlckluZGV4ID0gc3dpcGVySW5kZXggKyBOdW1iZXIoaW5kZXgpOwoKICAgICAgaWYgKHN3aXBlckluZGV4IDwgMCkgewogICAgICAgIHRoaXMuJFRvYXN0KCflt7Lnu4/mmK/nrKzkuIDlvKDkuoYnKTsKICAgICAgfSBlbHNlIGlmIChzd2lwZXJJbmRleCA+PSB0aGlzLnRvdGFsU2l6ZSkgewogICAgICAgIHRoaXMuJFRvYXN0KCflt7Lnu4/mmK/mnIDlkI7kuIDlvKDkuoYnKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnN3aXBlckluZGV4ID0gc3dpcGVySW5kZXg7CgogICAgICAgIGlmICghdGhpcy5zd2lwZWJveCkgewogICAgICAgICAgdGhpcy5zd2lwZWJveCA9IHRoaXMuJHJlZnMuc3dpcGVib3g7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnN3aXBlYm94LnN3aXBlVG8oc3dpcGVySW5kZXgpOwogICAgICB9CiAgICB9LAogICAgc2V0UGFnZTogZnVuY3Rpb24gc2V0UGFnZShpbmRleCkgewogICAgICB2YXIgcGFnZXMgPSBNYXRoLmNlaWwoKGluZGV4ICsgMSkgLyAxMCk7CiAgICAgIHZhciBwYWdlQXJyID0gdGhpcy5wYWdlQXJyIHx8IFtdOwogICAgICB0aGlzLnNldEluZm8oaW5kZXgpOyAvLyDorr7nva7pobXpnaLkv6Hmga8KCiAgICAgIGlmICgoaW5kZXggKyAxKSAlIDEwID09IDAgJiYgcGFnZUFyci5pbmRleE9mKHBhZ2VzICsgMSkgPCAwKSB7CiAgICAgICAgLy8g5Yik5pat5piv5ZCm6ZyA6KaB5Yqg6L295LiL5LiA6aG1ICYmIOi/meS4gOmhteayoei9vei/hwogICAgICAgIC8vIOWKoOi9veS4i+S4gOmhtQogICAgICAgIHZhciBwYWdlID0gdGhpcy5wYWdlOwogICAgICAgIGlmIChwYWdlID49IHRoaXMudG90YWxQYWdlKSByZXR1cm47CiAgICAgICAgcGFnZSsrOwogICAgICAgIHBhZ2VBcnIucHVzaChwYWdlKTsgLy8g5a2Y5YKo5bey5Yqg6L296aG16Z2iCgogICAgICAgIHRoaXMucGFnZUFyciA9IHBhZ2VBcnI7CiAgICAgICAgdGhpcy5nZXRDYXJkTGlzdChwYWdlKTsKICAgICAgfQogICAgfSwKICAgIC8vIOiOt+WPluWNoeWIuOWIl+ihqCAKICAgIGdldENhcmRMaXN0OiBmdW5jdGlvbiBnZXRDYXJkTGlzdCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBwYWdlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxOwogICAgICB0aGlzLiRUb2FzdC5sb2FkaW5nKHsKICAgICAgICBtZXNzYWdlOiAn5Yqg6L295LitLi4uJywKICAgICAgICBmb3JiaWRDbGljazogdHJ1ZSwKICAgICAgICBkdXJhdGlvbjogMAogICAgICB9KTsKICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CiAgICAgIHRoaXMuJGFwaVtvcHRpb25zLmFwaVVybF0oewogICAgICAgIHRyYWRlSWQ6IG9wdGlvbnMudHJhZGVJZCB8fCAnJywKICAgICAgICBhY3RTbjogb3B0aW9ucy5hY3RTbiB8fCAnJywKICAgICAgICBjYXJkSWQ6IG9wdGlvbnMuY2FyZElkIHx8ICcnLAogICAgICAgIGRldGFpbElkOiBvcHRpb25zLmRldGFpbElkIHx8ICcnLAogICAgICAgIHR5cGU6IHRoaXMub3B0aW9ucy50eXBlIHx8ICcnLAogICAgICAgIGNhcmRTdGFydFRpbWU6IG9wdGlvbnMuY2FyZFN0YXJ0VGltZSB8fCAnJywKICAgICAgICBjYXJkRW5kVGltZTogb3B0aW9ucy5jYXJkRW5kVGltZSB8fCAnJywKICAgICAgICBsYXQ6IHRoaXMubG9jYXRpb25JbmZvLmxhdGl0dWRlLAogICAgICAgIGxuZzogdGhpcy5sb2NhdGlvbkluZm8ubG9uZ2l0dWRlLAogICAgICAgIHBhZ2U6IHBhZ2UgfHwgMSwKICAgICAgICBwZXJTaXplOiAxMAogICAgICB9KS50aGVuKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHJlcykgewogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBpZiAoIXJlcy5zdGF0ZSkgewogICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNDsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgX3RoaXMucGFnZSA9IHBhZ2U7CgogICAgICAgICAgICAgICAgICBpZiAoIShfdGhpcy5wYWdlID09IDEpKSB7CiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIF90aGlzLnRvdGFsUGFnZSA9IHJlcy5pbmZvLnBhZ2UudG90YWxQYWdlOwogICAgICAgICAgICAgICAgICBfdGhpcy50b3RhbFNpemUgPSByZXMuaW5mby5wYWdlLnRvdGFsU2l6ZTsKCiAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5pbmZvLmNhcmRMaXN0Lmxlbmd0aCA+PSAxICYmIF90aGlzLnBhZ2UgPT0gMSkpIHsKICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jYXJkRGV0YWlsKHJlcy5pbmZvLmNhcmRMaXN0WzBdLmNhcmRJZCB8fCByZXMuaW5mby5jYXJkSWQsIHJlcy5pbmZvLmNhcmRMaXN0WzBdLmRldGFpbElkIHx8IHJlcy5pbmZvLmRldGFpbElkLCByZXMuaW5mby5jYXJkTGlzdFswXS50aGlyZENhcmRUeXBlKTsKCiAgICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNhcmRfdGV4dDJRckNvZGUocmVzLmluZm8uY2FyZExpc3QpOwoKICAgICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wYWdlID09IDEpIF90aGlzLnNldEluZm8oKTsKCiAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy50b2FzdFRleHQpIHsKICAgICAgICAgICAgICAgICAgICBfdGhpcy4kVG9hc3QoX3RoaXMudG9hc3RUZXh0KTsKCiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG9hc3RUZXh0ID0gJyc7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICAgICAgX3RoaXMuJFRvYXN0KHJlcy5tZXNzYWdlKTsKCiAgICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIF9jYWxsZWUpOwogICAgICAgIH0pKTsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeCkgewogICAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9OwogICAgICB9KCkpLmZpbmFsbHkoZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzLiRUb2FzdC5jbGVhcigpOwogICAgICB9KTsKICAgIH0sCiAgICAvLyDmjqXlj6PovazmjaLkuoznu7TnoIEKICAgIGNhcmRfdGV4dDJRckNvZGU6IGZ1bmN0aW9uIGNhcmRfdGV4dDJRckNvZGUobGlzdCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBfbG9vcCwgaSwgaW1nVXJsOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2xvb3AgPSAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2xvb3AoaSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2xvb3AkKF9jb250ZXh0MikgewogICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaXN0W2ldLmVuZFRpbWUpIGxpc3RbaV0uY2FyZEVuZFRpbWUgPSBsaXN0W2ldLmVuZFRpbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RbaV0uc3RhcnRUaW1lKSBsaXN0W2ldLmNhcmRTdGFydFRpbWUgPSBsaXN0W2ldLnN0YXJ0VGltZTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX3RoaXMyLmlzT3V0Q2FyZCAmJiAoX3RoaXMyLmlzT3V0Q2FyZC5pbmRleE9mKCc0JykgPiAtMSB8fCBfdGhpczIuaXNPdXRDYXJkLmluZGV4T2YoJzcnKSA+IC0xKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF90aGlzMi5pc091dENhcmQuaW5kZXhPZignNycpID4gLTEpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RbaV0uaW1nVXJsID0gbGlzdFtpXS5jYXJkUXJDb2RlOwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gOTsKICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi4kYXBpLmNhcmRfdGV4dDJRckNvZGUoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbGlzdFtpXS5jYXJkUXJDb2RlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZENvZGU6IGxpc3RbaV0uY2FyZENvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltZ1VybCA9IHJlcy5pbmZvLmNhcmRRckNvZGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RbaV0uaW1nVXJsID0gaW1nVXJsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczIuY2FyZEluZm8uY3JlYXRlVHlwZSA9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWdVcmwgPSBkcmF3UXJjb2RlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogMjUwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBsaXN0W2ldLmNhcmRRckNvZGUgfHwgJycKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdFtpXS5pbWdVcmwgPSBpbWdVcmw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShfdGhpczIuaXNPdXRDYXJkICYmIF90aGlzMi5pc091dENhcmQuaW5kZXhPZignNScpID4gLTEpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuJGFwaS5jYXJkX3RleHQyUXJDb2RlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGxpc3RbaV0uY2FyZFFyQ29kZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRDb2RlOiBsaXN0W2ldLmNhcmRDb2RlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVR5cGU6ICdCYXRfQ29kZScKICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltZ1VybCA9IHJlcy5pbmZvLmNhcmRRckNvZGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RbaV0uYmF0SW1nVXJsID0gaW1nVXJsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sIF9sb29wKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaSA9IDA7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGlmICghKGkgPCBsaXN0Lmxlbmd0aCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmRlbGVnYXRlWWllbGQoX2xvb3AoaSksICJ0MCIsIDQpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBpKys7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgLy8gaWYgKHRoaXMucGFnZSA9PSAxKSB0aGlzLmNhcmRMaXN0ID0gbGlzdAogICAgICAgICAgICAgICAgX3RoaXMyLmNhcmRMaXN0ID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShfdGhpczIuY2FyZExpc3QpLCBfdG9Db25zdW1hYmxlQXJyYXkobGlzdCkpOwogICAgICAgICAgICAgICAgX3RoaXMyLmluaXRpYWxTd2lwZSA9IF90aGlzMi5zd2lwZXJJbmRleDsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g6I635Y+W5Y2h5Yi46K+m5oOFIAogICAgY2FyZERldGFpbDogZnVuY3Rpb24gY2FyZERldGFpbChjYXJkSWQsIGRldGFpbElkLCB0aGlyZENhcmRUeXBlKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF90aGlzMy4kVG9hc3QubG9hZGluZyh7CiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICfliqDovb3kuK0uLi4nLAogICAgICAgICAgICAgICAgICBmb3JiaWRDbGljazogdHJ1ZSwKICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDAKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBfdGhpczMuJGFwaS5hY3RfY2FyZF9kZXRhaWwoewogICAgICAgICAgICAgICAgICBjYXJkSWQ6IGNhcmRJZCwKICAgICAgICAgICAgICAgICAgZGV0YWlsSWQ6IGRldGFpbElkCiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0ZSkgewogICAgICAgICAgICAgICAgICAgIC8vIHJlcy5pbmZvLnNob3dTdHlsZSAwLiDmnKrkv67mlLko5Y6f5Y2h5Yi4KTEu5Yi456CBMi7ljaHliLh1cmzlnLDlnYDvvJszLuWNoeWPt+WNoeWvhjs0LumAmueUqOS6jOe7tOegge+8mzUu6YCa55So5p2h5b2i56CB77ybNi7pgJrnlKjmnaHlvaLnoIHlkozkuoznu7TnoIHvvJs35LqM57u056CB5Zu+54mH77ybOOefreS/oQogICAgICAgICAgICAgICAgICAgIHZhciBzaG93U3R5bGUgPSByZXMuaW5mby5zaG93U3R5bGU7CgogICAgICAgICAgICAgICAgICAgIGlmIChzaG93U3R5bGUgPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgc2hvd1N0eWxlID0gdGhpcmRDYXJkVHlwZSArICcnOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3dTdHlsZS5pbmRleE9mKCc2JykgPiAtMSkgewogICAgICAgICAgICAgICAgICAgICAgc2hvd1N0eWxlID0gJzQsNSc7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvLyBpZiAocmVzLmluZm8uc2hvd1N0eWxlLmluZGV4T2YoJzcnKSA+IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gICAvLyA35LqM57u056CB5Zu+54mHCiAgICAgICAgICAgICAgICAgICAgLy8gICByZXMuaW5mby5zaG93U3R5bGUucmVwbGFjZSgnNycsICc0JykKICAgICAgICAgICAgICAgICAgICAvLyB9CiAgICAgICAgICAgICAgICAgICAgcmVzLmluZm8uc2hvd1N0eWxlID0gc2hvd1N0eWxlOyAvLyB0aGlzLnNldERhdGEoewogICAgICAgICAgICAgICAgICAgIC8vICAgY2FyZEluZm86IHJlcy5pbmZvLAogICAgICAgICAgICAgICAgICAgIC8vICAgc2hvcE5hbWU6IHJlcy5pbmZvLnNob3BOYW1lLAogICAgICAgICAgICAgICAgICAgIC8vICAgc2hvcFNuOiByZXMuaW5mby5zaG9wU24sCiAgICAgICAgICAgICAgICAgICAgLy8gICBzaG9wUGljOiByZXMuaW5mby5zaG9wUGljLAogICAgICAgICAgICAgICAgICAgIC8vICAgaXNPdXRDYXJkOiBzaG93U3R5bGUKICAgICAgICAgICAgICAgICAgICAvLyB9KQoKICAgICAgICAgICAgICAgICAgICBfdGhpczMuY2FyZEluZm8gPSByZXMuaW5mbzsKICAgICAgICAgICAgICAgICAgICBfdGhpczMuc2hvcE5hbWUgPSByZXMuaW5mby5zaG9wTmFtZTsKICAgICAgICAgICAgICAgICAgICBfdGhpczMuc2hvcFNuID0gcmVzLmluZm8uc2hvcFNuOwogICAgICAgICAgICAgICAgICAgIF90aGlzMy5zaG9wUGljID0gcmVzLmluZm8uc2hvcFBpYzsKICAgICAgICAgICAgICAgICAgICBfdGhpczMuaXNPdXRDYXJkID0gc2hvd1N0eWxlOwogICAgICAgICAgICAgICAgICAgIHZhciBzd2lwZXJIZWlnaHQgPSAwOwoKICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmluZm8uc3VwcGxpZXJDb2RlICE9ICdQQVJUWV9aV1knKSB7CiAgICAgICAgICAgICAgICAgICAgICBzd2lwZXJIZWlnaHQgPSA3MDsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmIChzaG93U3R5bGUuaW5kZXhPZignMScpID4gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgIHN3aXBlckhlaWdodCArPSAxNDE7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoc2hvd1N0eWxlLmluZGV4T2YoJzInKSA+IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICBzd2lwZXJIZWlnaHQgKz0gMTQxOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3dTdHlsZS5pbmRleE9mKCczJykgPiAtMSkgewogICAgICAgICAgICAgICAgICAgICAgc3dpcGVySGVpZ2h0ICs9IDIyMDsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmIChzaG93U3R5bGUuaW5kZXhPZignNCcpID4gLTEgfHwgc2hvd1N0eWxlLmluZGV4T2YoJzcnKSA+IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICBzd2lwZXJIZWlnaHQgKz0gMjcwOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3dTdHlsZS5pbmRleE9mKCc1JykgPiAtMSkgewogICAgICAgICAgICAgICAgICAgICAgc3dpcGVySGVpZ2h0ICs9IDEwODsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmIChzaG93U3R5bGUgIT0gNCAmJiBzaG93U3R5bGUgIT0gNSAmJiBzaG93U3R5bGUgIT0gNyAmJiBzaG93U3R5bGUgIT0gJzYnICYmIHNob3dTdHlsZSAhPSAnNCw1JykgewogICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5zZXREYXRhKHsKICAgICAgICAgICAgICAgICAgICAgIC8vICAgc2hvd0NhcmRDb2RlOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAvLyB9KQogICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLnNob3dDYXJkQ29kZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuc2V0RGF0YSh7CiAgICAgICAgICAgICAgICAgICAgICAvLyAgIHNob3dDYXJkQ29kZTogZmFsc2UKICAgICAgICAgICAgICAgICAgICAgIC8vIH0pCiAgICAgICAgICAgICAgICAgICAgICBfdGhpczMuc2hvd0NhcmRDb2RlID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfSAvLyB0aGlzLnNldERhdGEoewogICAgICAgICAgICAgICAgICAgIC8vICAgc3dpcGVySGVpZ2h0CiAgICAgICAgICAgICAgICAgICAgLy8gfSkKCgogICAgICAgICAgICAgICAgICAgIF90aGlzMy5zd2lwZXJIZWlnaHQgPSBzd2lwZXJIZWlnaHQ7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8gd3guc2hvd1RvYXN0KHsKICAgICAgICAgICAgICAgICAgICAvLyAgIHRpdGxlOiByZXMubWVzc2FnZSwKICAgICAgICAgICAgICAgICAgICAvLyAgIGljb246ICdub25lJwogICAgICAgICAgICAgICAgICAgIC8vIH0pCiAgICAgICAgICAgICAgICAgICAgX3RoaXMzLiRUb2FzdChyZXMubWVlc2FnZSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBfdGhpczMuJFRvYXN0LmNsZWFyKCk7CgogICAgICAgICAgICAgICAgICBfdGhpczMubG9hZGluZyA9IHRydWU7IC8vIHRoaXMuc2V0RGF0YSh7CiAgICAgICAgICAgICAgICAgIC8vICAgbG9hZGluZzogdHJ1ZQogICAgICAgICAgICAgICAgICAvLyB9KQogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDorr7nva7pobXpnaLkv6Hmga8KICAgIHNldEluZm86IGZ1bmN0aW9uIHNldEluZm8oKSB7CiAgICAgIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDsKICAgICAgdmFyIGNhcmRMaXN0ID0gdGhpcy5jYXJkTGlzdCwKICAgICAgICAgIGNhcmRJbmZvID0gdGhpcy5jYXJkSW5mbzsgLy8gdGhpcy5zZXREYXRhKHsKICAgICAgLy8gICBpbmZvOiBPYmplY3QuYXNzaWduKGNhcmRMaXN0W2luZGV4XSwgY2FyZEluZm8pCiAgICAgIC8vIH0pCgogICAgICB0aGlzLmluZm8gPSBPYmplY3QuYXNzaWduKGNhcmRMaXN0W2luZGV4XSwgY2FyZEluZm8pOyAvLyB0aGlzLnRyaWdnZXJFdmVudCgnc2V0SW5mbycsIHRoaXMuZGF0YS5pbmZvKQoKICAgICAgdGhpcy4kZW1pdCgnc2V0SW5mbycsIHRoaXMuaW5mbyk7CiAgICB9LAogICAgcHJldmlld0ltYWdlOiBmdW5jdGlvbiBwcmV2aWV3SW1hZ2UoX3JlZjIpIHsKICAgICAgdmFyIGN1cnJlbnRUYXJnZXQgPSBfcmVmMi5jdXJyZW50VGFyZ2V0OwogICAgICB2YXIgaW1nVXJsID0gY3VycmVudFRhcmdldC5kYXRhc2V0LmltZ3VybDsKICAgICAgd3gucHJldmlld0ltYWdlKHsKICAgICAgICBjdXJyZW50OiBpbWdVcmwsCiAgICAgICAgLy8g5b2T5YmN5pi+56S65Zu+54mH55qEaHR0cOmTvuaOpQogICAgICAgIHVybHM6IFtpbWdVcmxdIC8vIOmcgOimgemihOiniOeahOWbvueJh2h0dHDpk77mjqXliJfooagKCiAgICAgIH0pOwogICAgfSwKICAgIC8vIOWkjeWItuWNoeWIuOeggQogICAgc2VydmljZUNvcHk6IGZ1bmN0aW9uIHNlcnZpY2VDb3B5KHZhbCkgewogICAgICB0aGlzLiRUb2FzdCgn5aSN5Yi25oiQ5YqfJyk7CiAgICB9LAogICAgLy8g5qCH6K6w5aSW6YOo5Y2h5Yi4CiAgICBzdGFtcDogZnVuY3Rpb24gc3RhbXAoc3RhdGUpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICBpZiAoc3RhdGUgPT0gMSkgewogICAgICAgIC8vIHd4LnNob3dNb2RhbCh7CiAgICAgICAgLy8gICB0aXRsZTogJ+aPkOekuicsCiAgICAgICAgLy8gICBjb250ZW50OiAn5oKo56Gu5a6a5bey5Yiw5bqX5qC46ZSA5bm25L2/55So5q2k5Y2h5Yi45LqG5ZCXPycsCiAgICAgICAgLy8gICBjYW5jZWxUZXh0OiAn54K56ZSZ5LqGJywKICAgICAgICAvLyAgIGNvbmZpcm1UZXh0OiAgJ+ehruiupOagh+iusCcsCiAgICAgICAgLy8gICBzdWNjZXNzOiAocmVzKT0+IHsKICAgICAgICAvLyAgICAgaWYgKHJlcy5jb25maXJtKSB7CiAgICAgICAgLy8gICAgICAgdGhpcy5jYXJkX29mZihzdGF0ZSkKICAgICAgICAvLyAgICAgfSBlbHNlIGlmIChyZXMuY2FuY2VsKSB7CiAgICAgICAgLy8gICAgICAgY29uc29sZS5sb2coJ+eUqOaIt+eCueWHu+WPlua2iCcpCiAgICAgICAgLy8gICAgIH0KICAgICAgICAvLyAgIH0KICAgICAgICAvLyB9KQogICAgICAgIHRoaXMuJGRpYWxvZy5jb25maXJtKHsKICAgICAgICAgIHRpdGxlOiAn5o+Q56S6JywKICAgICAgICAgIG1lc3NhZ2U6ICfmgqjnoa7lrprlt7LliLDlupfmoLjplIDlubbkvb/nlKjmraTljaHliLjkuoblkJc/JywKICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn56Gu6K6k5qCH6K6wJywKICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICfngrnplJnkuoYnCiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczQuY2FyZF9vZmYoc3RhdGUpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY2FyZF9vZmYoc3RhdGUpOwogICAgICB9CiAgICB9LAogICAgY2FyZF9vZmY6IGZ1bmN0aW9uIGNhcmRfb2ZmKHN0YXRlKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMubG9hZGluZykgcmV0dXJuOwogICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlOwogICAgICB0aGlzLiRUb2FzdC5sb2FkaW5nKHsKICAgICAgICBtZXNzYWdlOiAn5Yqg6L295LitLi4uJywKICAgICAgICBmb3JiaWRDbGljazogdHJ1ZSwKICAgICAgICBkdXJhdGlvbjogMAogICAgICB9KTsKICAgICAgdGhpcy4kYXBpLm15X2NvdXBvbl9jYXJkX29mZih7CiAgICAgICAgY2FyZENvZGU6IHRoaXMuaW5mby5jYXJkQ29kZSwKICAgICAgICBvZmZTdGF0ZTogc3RhdGUgPT0gMSA/IHRydWUgOiBmYWxzZQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBpZiAocmVzLnN0YXRlKSB7CiAgICAgICAgICBpZiAoc3RhdGUgPT0gMSkgewogICAgICAgICAgICBfdGhpczUudG9hc3RUZXh0ID0gJ+agh+iusOaIkOWKnyc7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpczUudG9hc3RUZXh0ID0gJ+WPlua2iOaIkOWKnyc7CiAgICAgICAgICB9IC8vIOWNoeWIuOaAu+aVsOWPquacieS4gOW8oOaXtuaguOmUgOWQjuaYvuekuuW3suaguOmUgOWNoeWIuAoKCiAgICAgICAgICBpZiAoX3RoaXM1LnRvdGFsU2l6ZSA9PSAxICYmIHN0YXRlID09IDEpIHsKICAgICAgICAgICAgX3RoaXM1Lm9wdGlvbnMudHlwZSA9IDQ7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpczUub3B0aW9ucy50eXBlID0gMTsKICAgICAgICAgIH0KCiAgICAgICAgICBfdGhpczUucGFnZSA9IDE7CiAgICAgICAgICBfdGhpczUucGFnZUFyciA9IFsxXTsKICAgICAgICAgIF90aGlzNS5jYXJkTGlzdCA9IFtdOwogICAgICAgICAgX3RoaXM1LnN3aXBlckluZGV4ID0gMDsKCiAgICAgICAgICBfdGhpczUuZ2V0Q2FyZExpc3QoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gd3guc2hvd1RvYXN0KHsKICAgICAgICAgIC8vICAgdGl0bGU6IHJlcy5tZXNzYWdlLAogICAgICAgICAgLy8gICBpY29uOiAnbm9uZScKICAgICAgICAgIC8vIH0pCiAgICAgICAgICBfdGhpczUuJFRvYXN0KHJlcy5tZXNzYWdlKTsKICAgICAgICB9CiAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzNS4kVG9hc3QuY2xlYXIoKTsKCiAgICAgICAgX3RoaXM1LmxvYWRpbmcgPSBmYWxzZTsKICAgICAgfSk7CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5nZXRDYXJkTGlzdCgpOwogIH0KfTs="},null]}